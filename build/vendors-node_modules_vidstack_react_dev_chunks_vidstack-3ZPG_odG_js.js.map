{"version":3,"file":"vendors-node_modules_vidstack_react_dev_chunks_vidstack-3ZPG_odG_js.js?ver=5814cb6a6f28c0c44dc3","mappings":";;;;;;;;;;;;;;;;AAAA;;AAEA,CAAkI;AACuD;AAC1K;AACW;;AAE1B,iCAAiC,uEAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,aAAa;AACzB,mBAAmB,2DAAI,kDAAkD,2DAAI;AAC7E;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gEAAa;AACrC,IAAI,kEAAW;AACf,IAAI,kEAAW;AACf,yBAAyB,6DAAM;AAC/B;AACA;AACA,eAAe,2DAAQ,yBAAyB,cAAc;AAC9D;AACA;AACA;AACA,oBAAoB,0DAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wBAAwB;AAC5C,+HAA+H,4DAAS;AACxI,mBAAmB,oBAAoB,GAAG,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,YAAY,kEAAe;AAC3B,YAAY,kEAAe;AAC3B;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,UAAU,GAAG,MAAM;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,6DAAU;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6DAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAsD;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,gEAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,6DAAU;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6DAAU;AACpC;AACA,4BAA4B,2DAAQ,cAAc,SAAS;AAC3D;AACA;AACA;AACA,6DAA6D,UAAU,uLAAuL,2DAAI,wDAAwD,qBAAqB;AAC/U;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA,QAAQ,4DAAS;AACjB;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,+DAAQ;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,MAAM;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,MAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAW,WAAW,+DAAQ;AACtC;AACA;AACA;AACA;AACA,oCAAoC,2DAAQ;AAC5C,kCAAkC,kBAAkB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,2DAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,2DAAQ;AAClB;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,kBAAkB,oEAAa;AAC/B;AACA;AACA;AACA;AACA,UAAU,2DAAQ;AAClB;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,+CAA+C;AAC/C,MAAM,kEAAW;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,QAAQ,KAAI,0FAA0F,CAAE;AACxG;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,gDAAgD;AAChD,OAAO,+DAAQ;AACf;AACA;AACA,UAAU,iEAAU;AACpB,SAAS,iEAAU;AACnB;AACA,QAAQ,KAAI,8FAA8F,CAAE;AAC5G;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,gEAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qEAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc,6BAA6B,OAAO;AAClE;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,+DAAQ;AACjB,IAAI,iEAAU;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2DAAI;AACtB;AACA,KAAK;AACL;AACA;AACA,SAAS,+DAAQ;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEuB","sources":["webpack://fb-blocks/./node_modules/@vidstack/react/dev/chunks/vidstack-3ZPG_odG.js"],"sourcesContent":["\"use client\"\n\nimport { peek, listenEvent, effect, DOMEvent, camelToKebabCase, isString, isUndefined, isFunction } from './vidstack-D_bWd66h.js';\nimport { QualitySymbol, RAFLoop, TextTrack, TextTrackSymbol, ListSymbol, IS_CHROME, coerceToError, loadScript, VideoProvider, isHLSSupported, preconnect } from './vidstack-DUlCophs.js';\nimport 'react';\nimport '@floating-ui/dom';\n\nconst toDOMEventType = (type) => camelToKebabCase(type);\nclass HLSController {\n  #video;\n  #ctx;\n  #instance = null;\n  #stopLiveSync = null;\n  config = {};\n  #callbacks = /* @__PURE__ */ new Set();\n  get instance() {\n    return this.#instance;\n  }\n  constructor(video, ctx) {\n    this.#video = video;\n    this.#ctx = ctx;\n  }\n  setup(ctor) {\n    const { streamType } = this.#ctx.$state;\n    const isLive = peek(streamType).includes(\"live\"), isLiveLowLatency = peek(streamType).includes(\"ll-\");\n    this.#instance = new ctor({\n      lowLatencyMode: isLiveLowLatency,\n      backBufferLength: isLiveLowLatency ? 4 : isLive ? 8 : void 0,\n      renderTextTracksNatively: false,\n      ...this.config\n    });\n    const dispatcher = this.#dispatchHLSEvent.bind(this);\n    for (const event of Object.values(ctor.Events)) this.#instance.on(event, dispatcher);\n    this.#instance.on(ctor.Events.ERROR, this.#onError.bind(this));\n    for (const callback of this.#callbacks) callback(this.#instance);\n    this.#ctx.player.dispatch(\"hls-instance\", {\n      detail: this.#instance\n    });\n    this.#instance.attachMedia(this.#video);\n    this.#instance.on(ctor.Events.AUDIO_TRACK_SWITCHED, this.#onAudioSwitch.bind(this));\n    this.#instance.on(ctor.Events.LEVEL_SWITCHED, this.#onLevelSwitched.bind(this));\n    this.#instance.on(ctor.Events.LEVEL_LOADED, this.#onLevelLoaded.bind(this));\n    this.#instance.on(ctor.Events.LEVEL_UPDATED, this.#onLevelUpdated.bind(this));\n    this.#instance.on(ctor.Events.NON_NATIVE_TEXT_TRACKS_FOUND, this.#onTracksFound.bind(this));\n    this.#instance.on(ctor.Events.CUES_PARSED, this.#onCuesParsed.bind(this));\n    this.#ctx.qualities[QualitySymbol.enableAuto] = this.#enableAutoQuality.bind(this);\n    listenEvent(this.#ctx.qualities, \"change\", this.#onUserQualityChange.bind(this));\n    listenEvent(this.#ctx.audioTracks, \"change\", this.#onUserAudioChange.bind(this));\n    this.#stopLiveSync = effect(this.#liveSync.bind(this));\n  }\n  #createDOMEvent(type, data) {\n    return new DOMEvent(toDOMEventType(type), { detail: data });\n  }\n  #liveSync() {\n    if (!this.#ctx.$state.live()) return;\n    const raf = new RAFLoop(this.#liveSyncPosition.bind(this));\n    raf.start();\n    return raf.stop.bind(raf);\n  }\n  #liveSyncPosition() {\n    this.#ctx.$state.liveSyncPosition.set(this.#instance?.liveSyncPosition ?? Infinity);\n  }\n  #dispatchHLSEvent(type, data) {\n    this.#ctx.player?.dispatch(this.#createDOMEvent(type, data));\n  }\n  #onTracksFound(eventType, data) {\n    const event = this.#createDOMEvent(eventType, data);\n    let currentTrack = -1;\n    for (let i = 0; i < data.tracks.length; i++) {\n      const nonNativeTrack = data.tracks[i], init = nonNativeTrack.subtitleTrack ?? nonNativeTrack.closedCaptions, track = new TextTrack({\n        id: `hls-${nonNativeTrack.kind}-${i}`,\n        src: init?.url,\n        label: nonNativeTrack.label,\n        language: init?.lang,\n        kind: nonNativeTrack.kind,\n        default: nonNativeTrack.default\n      });\n      track[TextTrackSymbol.readyState] = 2;\n      track[TextTrackSymbol.onModeChange] = () => {\n        if (track.mode === \"showing\") {\n          this.#instance.subtitleTrack = i;\n          currentTrack = i;\n        } else if (currentTrack === i) {\n          this.#instance.subtitleTrack = -1;\n          currentTrack = -1;\n        }\n      };\n      this.#ctx.textTracks.add(track, event);\n    }\n  }\n  #onCuesParsed(eventType, data) {\n    const index = this.#instance?.subtitleTrack, track = this.#ctx.textTracks.getById(`hls-${data.type}-${index}`);\n    if (!track) return;\n    const event = this.#createDOMEvent(eventType, data);\n    for (const cue of data.cues) {\n      cue.positionAlign = \"auto\";\n      track.addCue(cue, event);\n    }\n  }\n  #onAudioSwitch(eventType, data) {\n    const track = this.#ctx.audioTracks[data.id];\n    if (track) {\n      const trigger = this.#createDOMEvent(eventType, data);\n      this.#ctx.audioTracks[ListSymbol.select](track, true, trigger);\n    }\n  }\n  #onLevelSwitched(eventType, data) {\n    const quality = this.#ctx.qualities[data.level];\n    if (quality) {\n      const trigger = this.#createDOMEvent(eventType, data);\n      this.#ctx.qualities[ListSymbol.select](quality, true, trigger);\n    }\n  }\n  #onLevelUpdated(eventType, data) {\n    if (data.details.totalduration > 0) {\n      this.#ctx.$state.inferredLiveDVRWindow.set(data.details.totalduration);\n    }\n  }\n  #onLevelLoaded(eventType, data) {\n    if (this.#ctx.$state.canPlay()) return;\n    const { type, live, totalduration: duration, targetduration } = data.details, trigger = this.#createDOMEvent(eventType, data);\n    this.#ctx.notify(\n      \"stream-type-change\",\n      live ? type === \"EVENT\" && Number.isFinite(duration) && targetduration >= 10 ? \"live:dvr\" : \"live\" : \"on-demand\",\n      trigger\n    );\n    this.#ctx.notify(\"duration-change\", duration, trigger);\n    const media = this.#instance.media;\n    if (this.#instance.currentLevel === -1) {\n      this.#ctx.qualities[QualitySymbol.setAuto](true, trigger);\n    }\n    for (const remoteTrack of this.#instance.audioTracks) {\n      const localTrack = {\n        id: remoteTrack.id.toString(),\n        label: remoteTrack.name,\n        language: remoteTrack.lang || \"\",\n        kind: \"main\"\n      };\n      this.#ctx.audioTracks[ListSymbol.add](localTrack, trigger);\n    }\n    for (const level of this.#instance.levels) {\n      const videoQuality = {\n        id: level.id?.toString() ?? level.height + \"p\",\n        width: level.width,\n        height: level.height,\n        codec: level.codecSet,\n        bitrate: level.bitrate\n      };\n      this.#ctx.qualities[ListSymbol.add](videoQuality, trigger);\n    }\n    media.dispatchEvent(new DOMEvent(\"canplay\", { trigger }));\n  }\n  #onError(eventType, data) {\n    {\n      this.#ctx.logger?.errorGroup(`[vidstack] HLS error \\`${eventType}\\``).labelledLog(\"Media Element\", this.#instance?.media).labelledLog(\"HLS Instance\", this.#instance).labelledLog(\"Event Type\", eventType).labelledLog(\"Data\", data).labelledLog(\"Src\", peek(this.#ctx.$state.source)).labelledLog(\"Media Store\", { ...this.#ctx.$state }).dispatch();\n    }\n    if (data.fatal) {\n      switch (data.type) {\n        case \"mediaError\":\n          this.#instance?.recoverMediaError();\n          break;\n        default:\n          this.#onFatalError(data.error);\n          break;\n      }\n    }\n  }\n  #onFatalError(error) {\n    this.#ctx.notify(\"error\", {\n      message: error.message,\n      code: 1,\n      error\n    });\n  }\n  #enableAutoQuality() {\n    if (this.#instance) this.#instance.currentLevel = -1;\n  }\n  #onUserQualityChange() {\n    const { qualities } = this.#ctx;\n    if (!this.#instance || qualities.auto) return;\n    this.#instance[qualities.switch + \"Level\"] = qualities.selectedIndex;\n    if (IS_CHROME) {\n      this.#video.currentTime = this.#video.currentTime;\n    }\n  }\n  #onUserAudioChange() {\n    const { audioTracks } = this.#ctx;\n    if (this.#instance && this.#instance.audioTrack !== audioTracks.selectedIndex) {\n      this.#instance.audioTrack = audioTracks.selectedIndex;\n    }\n  }\n  onInstance(callback) {\n    this.#callbacks.add(callback);\n    return () => this.#callbacks.delete(callback);\n  }\n  loadSource(src) {\n    if (!isString(src.src)) return;\n    this.#instance?.loadSource(src.src);\n  }\n  destroy() {\n    this.#instance?.destroy();\n    this.#instance = null;\n    this.#stopLiveSync?.();\n    this.#stopLiveSync = null;\n    this.#ctx?.logger?.info(\"\\u{1F3D7}\\uFE0F Destroyed HLS instance\");\n  }\n}\n\nclass HLSLibLoader {\n  #lib;\n  #ctx;\n  #callback;\n  constructor(lib, ctx, callback) {\n    this.#lib = lib;\n    this.#ctx = ctx;\n    this.#callback = callback;\n    this.#startLoading();\n  }\n  async #startLoading() {\n    this.#ctx.logger?.info(\"\\u{1F3D7}\\uFE0F Loading HLS Library\");\n    const callbacks = {\n      onLoadStart: this.#onLoadStart.bind(this),\n      onLoaded: this.#onLoaded.bind(this),\n      onLoadError: this.#onLoadError.bind(this)\n    };\n    let ctor = await loadHLSScript(this.#lib, callbacks);\n    if (isUndefined(ctor) && !isString(this.#lib)) ctor = await importHLS(this.#lib, callbacks);\n    if (!ctor) return null;\n    if (!ctor.isSupported()) {\n      const message = \"[vidstack] `hls.js` is not supported in this environment\";\n      this.#ctx.logger?.error(message);\n      this.#ctx.player.dispatch(new DOMEvent(\"hls-unsupported\"));\n      this.#ctx.notify(\"error\", { message, code: 4 });\n      return null;\n    }\n    return ctor;\n  }\n  #onLoadStart() {\n    {\n      this.#ctx.logger?.infoGroup(\"Starting to load `hls.js`\").labelledLog(\"URL\", this.#lib).dispatch();\n    }\n    this.#ctx.player.dispatch(new DOMEvent(\"hls-lib-load-start\"));\n  }\n  #onLoaded(ctor) {\n    {\n      this.#ctx.logger?.infoGroup(\"Loaded `hls.js`\").labelledLog(\"Library\", this.#lib).labelledLog(\"Constructor\", ctor).dispatch();\n    }\n    this.#ctx.player.dispatch(\n      new DOMEvent(\"hls-lib-loaded\", {\n        detail: ctor\n      })\n    );\n    this.#callback(ctor);\n  }\n  #onLoadError(e) {\n    const error = coerceToError(e);\n    {\n      this.#ctx.logger?.errorGroup(\"[vidstack] Failed to load `hls.js`\").labelledLog(\"Library\", this.#lib).labelledLog(\"Error\", e).dispatch();\n    }\n    this.#ctx.player.dispatch(\n      new DOMEvent(\"hls-lib-load-error\", {\n        detail: error\n      })\n    );\n    this.#ctx.notify(\"error\", {\n      message: error.message,\n      code: 4,\n      error\n    });\n  }\n}\nasync function importHLS(loader, callbacks = {}) {\n  if (isUndefined(loader)) return void 0;\n  callbacks.onLoadStart?.();\n  if (loader.prototype && loader.prototype !== Function) {\n    callbacks.onLoaded?.(loader);\n    return loader;\n  }\n  try {\n    const ctor = (await loader())?.default;\n    if (ctor && !!ctor.isSupported) {\n      callbacks.onLoaded?.(ctor);\n    } else {\n      throw Error(\n        true ? \"[vidstack] failed importing `hls.js`. Dynamic import returned invalid constructor.\" : \"\"\n      );\n    }\n    return ctor;\n  } catch (err) {\n    callbacks.onLoadError?.(err);\n  }\n  return void 0;\n}\nasync function loadHLSScript(src, callbacks = {}) {\n  if (!isString(src)) return void 0;\n  callbacks.onLoadStart?.();\n  try {\n    await loadScript(src);\n    if (!isFunction(window.Hls)) {\n      throw Error(\n        true ? \"[vidstack] failed loading `hls.js`. Could not find a valid `Hls` constructor on window\" : \"\"\n      );\n    }\n    const ctor = window.Hls;\n    callbacks.onLoaded?.(ctor);\n    return ctor;\n  } catch (err) {\n    callbacks.onLoadError?.(err);\n  }\n  return void 0;\n}\n\nconst JS_DELIVR_CDN = \"https://cdn.jsdelivr.net\";\nclass HLSProvider extends VideoProvider {\n  $$PROVIDER_TYPE = \"HLS\";\n  #ctor = null;\n  #controller = new HLSController(this.video, this.ctx);\n  /**\n   * The `hls.js` constructor.\n   */\n  get ctor() {\n    return this.#ctor;\n  }\n  /**\n   * The current `hls.js` instance.\n   */\n  get instance() {\n    return this.#controller.instance;\n  }\n  /**\n   * Whether `hls.js` is supported in this environment.\n   */\n  static supported = isHLSSupported();\n  get type() {\n    return \"hls\";\n  }\n  get canLiveSync() {\n    return true;\n  }\n  #library = `${JS_DELIVR_CDN}/npm/hls.js@^1.5.0/dist/hls${\".js\" }`;\n  /**\n   * The `hls.js` configuration object.\n   *\n   * @see {@link https://github.com/video-dev/hls.js/blob/master/docs/API.md#fine-tuning}\n   */\n  get config() {\n    return this.#controller.config;\n  }\n  set config(config) {\n    this.#controller.config = config;\n  }\n  /**\n   * The `hls.js` constructor (supports dynamic imports) or a URL of where it can be found.\n   *\n   * @defaultValue `https://cdn.jsdelivr.net/npm/hls.js@^1.0.0/dist/hls.min.js`\n   */\n  get library() {\n    return this.#library;\n  }\n  set library(library) {\n    this.#library = library;\n  }\n  preconnect() {\n    if (!isString(this.#library)) return;\n    preconnect(this.#library);\n  }\n  setup() {\n    super.setup();\n    new HLSLibLoader(this.#library, this.ctx, (ctor) => {\n      this.#ctor = ctor;\n      this.#controller.setup(ctor);\n      this.ctx.notify(\"provider-setup\", this);\n      const src = peek(this.ctx.$state.source);\n      if (src) this.loadSource(src);\n    });\n  }\n  async loadSource(src, preload) {\n    if (!isString(src.src)) {\n      this.removeSource();\n      return;\n    }\n    this.media.preload = preload || \"\";\n    this.appendSource(src, \"application/x-mpegurl\");\n    this.#controller.loadSource(src);\n    this.currentSrc = src;\n  }\n  /**\n   * The given callback is invoked when a new `hls.js` instance is created and right before it's\n   * attached to media.\n   */\n  onInstance(callback) {\n    const instance = this.#controller.instance;\n    if (instance) callback(instance);\n    return this.#controller.onInstance(callback);\n  }\n  destroy() {\n    this.#controller.destroy();\n  }\n}\n\nexport { HLSProvider };\n"],"names":[],"sourceRoot":""}