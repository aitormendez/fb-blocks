{"version":3,"file":"vendors-node_modules_vidstack_react_dev_chunks_vidstack-Bt-dOpts_js.js?ver=de8a9528b96e7372e5a2","mappings":";;;;;;;;;;;;;;;;;;AAAA;;AAEA,CAA4H;AACd;AACvD;AACyB;AACjE;AACW;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,gEAAa;AACzC;AACA,UAAU,kEAAW;AACrB;AACA;AACA,aAAa,6DAAM;AACnB,SAAS,6DAAM;AACf;AACA;AACA;AACA,uBAAuB,4DAAS;AAChC,iBAAiB,0DAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iEAAU;AACd;AACA;AACA;AACA,IAAI,6DAAM;AACV,IAAI,6DAAM;AACV,IAAI,6DAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2DAAI;AACjC;AACA;AACA;AACA;AACA;AACA,SAAS,+DAAQ;AACjB;AACA;AACA;AACA;AACA;AACA,YAAY,gBAAgB,EAAE,0EAAmB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB,SAAS,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA,oBAAoB,sEAAe;AACnC;AACA,IAAI,wEAAiB;AACrB;AACA,KAAK;AACL;AACA;AACA,iFAAiF,QAAQ;AACzF;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oBAAoB;AACrD;AACA,cAAc,6DAAU;AACxB;AACA,aAAa,kEAAW;AACxB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc,sBAAsB,8BAA8B;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAA0D;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+BAA+B;AAC7C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,YAAY,iBAAiB;AAC7B,8BAA8B,4DAAS;AACvC;AACA,oBAAoB,4DAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8DAAO;AACnB;AACA;AACA;AACA;AACA,6BAA6B,2DAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,SAAS;AACrB;AACA;AACA;AACA,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC,WAAW,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4DAAS;AAC/B;AACA;AACA,KAAK,KAAK,cAAc;AACxB,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gEAAa;AACrC;AACA;AACA;AACA;AACA,0BAA0B,6DAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,KAAK,IAAI;AAC9B;AACA;AACA;AACA,0BAA0B,gEAAa;AACvC,0BAA0B,6DAAU;AACpC,MAAM;AACN,0BAA0B,6DAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2DAAI;AACjD;AACA;AACA,kCAAkC,4DAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sEAAe;AACjC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,8BAA8B,4DAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEyB;;;;;;;;;;;;;;;;;ACniBzB;;AAEA,CAAsE;AACe;;AAErF;AACA;AACA,QAAQ,6DAAM;AACd;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,YAAY,iBAAiB,oBAAoB,eAAe;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kEAAW;AACf,IAAI,kEAAW;AACf,IAAI,6DAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2DAAI;AACvB,qCAAqC,wEAAiB;AACtD;AACA;AACA,QAAQ,4DAAS;AACjB;AACA;AACA;AACA,kIAAkI,+DAAQ;AAC1I;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEyB;;;;;;;;;;;;;;;;AC5DzB;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,0FAA0F,QAAQ;AAClG;AACA,uCAAuC,UAAU;AACjD;AACA;AACA;AACA;AACA,GAAG;AACH,8KAA8K,YAAY;AAC1L;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEkD","sources":["webpack://fb-blocks/./node_modules/@vidstack/react/dev/chunks/vidstack-Bt-dOpts.js","webpack://fb-blocks/./node_modules/@vidstack/react/dev/chunks/vidstack-D8t5kEKd.js","webpack://fb-blocks/./node_modules/@vidstack/react/dev/chunks/vidstack-krOAtKMi.js"],"sourcesContent":["\"use client\"\n\nimport { createScope, signal, effect, peek, isString, deferredPromise, listenEvent, isArray } from './vidstack-D_bWd66h.js';\nimport { TimeRange, RAFLoop, preconnect, ListSymbol, TextTrack, QualitySymbol } from './vidstack-DUlCophs.js';\nimport { EmbedProvider } from './vidstack-D8t5kEKd.js';\nimport { resolveVimeoVideoId, getVimeoVideoInfo } from './vidstack-krOAtKMi.js';\nimport 'react';\nimport '@floating-ui/dom';\n\nconst trackedVimeoEvents = [\n  \"bufferend\",\n  \"bufferstart\",\n  // 'cuechange',\n  \"durationchange\",\n  \"ended\",\n  \"enterpictureinpicture\",\n  \"error\",\n  \"fullscreenchange\",\n  \"leavepictureinpicture\",\n  \"loaded\",\n  // 'loadeddata',\n  // 'loadedmetadata',\n  // 'loadstart',\n  \"playProgress\",\n  \"loadProgress\",\n  \"pause\",\n  \"play\",\n  \"playbackratechange\",\n  // 'progress',\n  \"qualitychange\",\n  \"seeked\",\n  \"seeking\",\n  // 'texttrackchange',\n  \"timeupdate\",\n  \"volumechange\",\n  \"waiting\"\n  // 'adstarted',\n  // 'adcompleted',\n  // 'aderror',\n  // 'adskipped',\n  // 'adallcompleted',\n  // 'adclicked',\n  // 'chapterchange',\n  // 'chromecastconnected',\n  // 'remoteplaybackavailabilitychange',\n  // 'remoteplaybackconnecting',\n  // 'remoteplaybackconnect',\n  // 'remoteplaybackdisconnect',\n  // 'liveeventended',\n  // 'liveeventstarted',\n  // 'livestreamoffline',\n  // 'livestreamonline',\n];\n\nclass VimeoProvider extends EmbedProvider {\n  $$PROVIDER_TYPE = \"VIMEO\";\n  scope = createScope();\n  fullscreen;\n  #ctx;\n  #videoId = signal(\"\");\n  #pro = signal(false);\n  #hash = null;\n  #currentSrc = null;\n  #fullscreenActive = false;\n  #seekableRange = new TimeRange(0, 0);\n  #timeRAF = new RAFLoop(this.#onAnimationFrame.bind(this));\n  #currentCue = null;\n  #chaptersTrack = null;\n  #promises = /* @__PURE__ */ new Map();\n  #videoInfoPromise = null;\n  constructor(iframe, ctx) {\n    super(iframe);\n    this.#ctx = ctx;\n    const self = this;\n    this.fullscreen = {\n      get active() {\n        return self.#fullscreenActive;\n      },\n      supported: true,\n      enter: () => this.#remote(\"requestFullscreen\"),\n      exit: () => this.#remote(\"exitFullscreen\")\n    };\n  }\n  /**\n   * Whether tracking session data should be enabled on the embed, including cookies and analytics.\n   * This is turned off by default to be GDPR-compliant.\n   *\n   * @defaultValue `false`\n   */\n  cookies = false;\n  title = true;\n  byline = true;\n  portrait = true;\n  color = \"00ADEF\";\n  get type() {\n    return \"vimeo\";\n  }\n  get currentSrc() {\n    return this.#currentSrc;\n  }\n  get videoId() {\n    return this.#videoId();\n  }\n  get hash() {\n    return this.#hash;\n  }\n  get isPro() {\n    return this.#pro();\n  }\n  preconnect() {\n    preconnect(this.getOrigin());\n  }\n  setup() {\n    super.setup();\n    effect(this.#watchVideoId.bind(this));\n    effect(this.#watchVideoInfo.bind(this));\n    effect(this.#watchPro.bind(this));\n    this.#ctx.notify(\"provider-setup\", this);\n  }\n  destroy() {\n    this.#reset();\n    this.fullscreen = void 0;\n    const message = \"provider destroyed\";\n    for (const promises of this.#promises.values()) {\n      for (const { reject } of promises) reject(message);\n    }\n    this.#promises.clear();\n    this.#remote(\"destroy\");\n  }\n  async play() {\n    return this.#remote(\"play\");\n  }\n  async pause() {\n    return this.#remote(\"pause\");\n  }\n  setMuted(muted) {\n    this.#remote(\"setMuted\", muted);\n  }\n  setCurrentTime(time) {\n    this.#remote(\"seekTo\", time);\n    this.#ctx.notify(\"seeking\", time);\n  }\n  setVolume(volume) {\n    this.#remote(\"setVolume\", volume);\n    this.#remote(\"setMuted\", peek(this.#ctx.$state.muted));\n  }\n  setPlaybackRate(rate) {\n    this.#remote(\"setPlaybackRate\", rate);\n  }\n  async loadSource(src) {\n    if (!isString(src.src)) {\n      this.#currentSrc = null;\n      this.#hash = null;\n      this.#videoId.set(\"\");\n      return;\n    }\n    const { videoId, hash } = resolveVimeoVideoId(src.src);\n    this.#videoId.set(videoId ?? \"\");\n    this.#hash = hash ?? null;\n    this.#currentSrc = src;\n  }\n  #watchVideoId() {\n    this.#reset();\n    const videoId = this.#videoId();\n    if (!videoId) {\n      this.src.set(\"\");\n      return;\n    }\n    this.src.set(`${this.getOrigin()}/video/${videoId}`);\n    this.#ctx.notify(\"load-start\");\n  }\n  #watchVideoInfo() {\n    const videoId = this.#videoId();\n    if (!videoId) return;\n    const promise = deferredPromise(), abort = new AbortController();\n    this.#videoInfoPromise = promise;\n    getVimeoVideoInfo(videoId, abort, this.#hash).then((info) => {\n      promise.resolve(info);\n    }).catch((e) => {\n      promise.reject();\n      {\n        this.#ctx.logger?.warnGroup(`Failed to fetch vimeo video info for id \\`${videoId}\\`.`).labelledLog(\"Error\", e).dispatch();\n      }\n    });\n    return () => {\n      promise.reject();\n      abort.abort();\n    };\n  }\n  #watchPro() {\n    const isPro = this.#pro(), { $state, qualities } = this.#ctx;\n    $state.canSetPlaybackRate.set(isPro);\n    qualities[ListSymbol.setReadonly](!isPro);\n    if (isPro) {\n      return listenEvent(qualities, \"change\", () => {\n        if (qualities.auto) return;\n        const id = qualities.selected?.id;\n        if (id) this.#remote(\"setQuality\", id);\n      });\n    }\n  }\n  getOrigin() {\n    return \"https://player.vimeo.com\";\n  }\n  buildParams() {\n    const { keyDisabled } = this.#ctx.$props, { playsInline, nativeControls } = this.#ctx.$state, showControls = nativeControls();\n    return {\n      title: this.title,\n      byline: this.byline,\n      color: this.color,\n      portrait: this.portrait,\n      controls: showControls,\n      h: this.hash,\n      keyboard: showControls && !keyDisabled(),\n      transparent: true,\n      playsinline: playsInline(),\n      dnt: !this.cookies\n    };\n  }\n  #onAnimationFrame() {\n    this.#remote(\"getCurrentTime\");\n  }\n  // Embed will sometimes dispatch 0 at end of playback.\n  #preventTimeUpdates = false;\n  #onTimeUpdate(time, trigger) {\n    if (this.#preventTimeUpdates && time === 0) return;\n    const { realCurrentTime, paused, bufferedEnd, seekableEnd, live } = this.#ctx.$state;\n    if (realCurrentTime() === time) return;\n    const prevTime = realCurrentTime();\n    this.#ctx.notify(\"time-change\", time, trigger);\n    if (Math.abs(prevTime - time) > 1.5) {\n      this.#ctx.notify(\"seeking\", time, trigger);\n      if (!paused() && bufferedEnd() < time) {\n        this.#ctx.notify(\"waiting\", void 0, trigger);\n      }\n    }\n    if (!live() && seekableEnd() - time < 0.01) {\n      this.#ctx.notify(\"end\", void 0, trigger);\n      this.#preventTimeUpdates = true;\n      setTimeout(() => {\n        this.#preventTimeUpdates = false;\n      }, 500);\n    }\n  }\n  #onSeeked(time, trigger) {\n    this.#ctx.notify(\"seeked\", time, trigger);\n  }\n  #onLoaded(trigger) {\n    const videoId = this.#videoId();\n    this.#videoInfoPromise?.promise.then((info) => {\n      if (!info) return;\n      const { title, poster, duration, pro } = info;\n      this.#pro.set(pro);\n      this.#ctx.notify(\"title-change\", title, trigger);\n      this.#ctx.notify(\"poster-change\", poster, trigger);\n      this.#ctx.notify(\"duration-change\", duration, trigger);\n      this.#onReady(duration, trigger);\n    }).catch(() => {\n      if (videoId !== this.#videoId()) return;\n      this.#remote(\"getVideoTitle\");\n      this.#remote(\"getDuration\");\n    });\n  }\n  #onReady(duration, trigger) {\n    const { nativeControls } = this.#ctx.$state, showEmbedControls = nativeControls();\n    this.#seekableRange = new TimeRange(0, duration);\n    const detail = {\n      buffered: new TimeRange(0, 0),\n      seekable: this.#seekableRange,\n      duration\n    };\n    this.#ctx.delegate.ready(detail, trigger);\n    if (!showEmbedControls) {\n      this.#remote(\"_hideOverlay\");\n    }\n    this.#remote(\"getQualities\");\n    this.#remote(\"getChapters\");\n  }\n  #onMethod(method, data, trigger) {\n    switch (method) {\n      case \"getVideoTitle\":\n        const videoTitle = data;\n        this.#ctx.notify(\"title-change\", videoTitle, trigger);\n        break;\n      case \"getDuration\":\n        const duration = data;\n        if (!this.#ctx.$state.canPlay()) {\n          this.#onReady(duration, trigger);\n        } else {\n          this.#ctx.notify(\"duration-change\", duration, trigger);\n        }\n        break;\n      case \"getCurrentTime\":\n        this.#onTimeUpdate(data, trigger);\n        break;\n      case \"getBuffered\":\n        if (isArray(data) && data.length) {\n          this.#onLoadProgress(data[data.length - 1][1], trigger);\n        }\n        break;\n      case \"setMuted\":\n        this.#onVolumeChange(peek(this.#ctx.$state.volume), data, trigger);\n        break;\n      // case 'getTextTracks':\n      //   this.#onTextTracksChange(data as VimeoTextTrack[], trigger);\n      //   break;\n      case \"getChapters\":\n        this.#onChaptersChange(data);\n        break;\n      case \"getQualities\":\n        this.#onQualitiesChange(data, trigger);\n        break;\n    }\n    this.#getPromise(method)?.resolve();\n  }\n  #attachListeners() {\n    for (const type of trackedVimeoEvents) {\n      this.#remote(\"addEventListener\", type);\n    }\n  }\n  #onPause(trigger) {\n    this.#timeRAF.stop();\n    this.#ctx.notify(\"pause\", void 0, trigger);\n  }\n  #onPlay(trigger) {\n    this.#timeRAF.start();\n    this.#ctx.notify(\"play\", void 0, trigger);\n  }\n  #onPlayProgress(trigger) {\n    const { paused } = this.#ctx.$state;\n    if (!paused() && !this.#preventTimeUpdates) {\n      this.#ctx.notify(\"playing\", void 0, trigger);\n    }\n  }\n  #onLoadProgress(buffered, trigger) {\n    const detail = {\n      buffered: new TimeRange(0, buffered),\n      seekable: this.#seekableRange\n    };\n    this.#ctx.notify(\"progress\", detail, trigger);\n  }\n  #onBufferStart(trigger) {\n    this.#ctx.notify(\"waiting\", void 0, trigger);\n  }\n  #onBufferEnd(trigger) {\n    const { paused } = this.#ctx.$state;\n    if (!paused()) this.#ctx.notify(\"playing\", void 0, trigger);\n  }\n  #onWaiting(trigger) {\n    const { paused } = this.#ctx.$state;\n    if (paused()) {\n      this.#ctx.notify(\"play\", void 0, trigger);\n    }\n    this.#ctx.notify(\"waiting\", void 0, trigger);\n  }\n  #onVolumeChange(volume, muted, trigger) {\n    const detail = { volume, muted };\n    this.#ctx.notify(\"volume-change\", detail, trigger);\n  }\n  // #onTextTrackChange(track: VimeoTextTrack, trigger: Event) {\n  //   const textTrack = this.#ctx.textTracks.toArray().find((t) => t.language === track.language);\n  //   if (textTrack) textTrack.mode = track.mode;\n  // }\n  // #onTextTracksChange(tracks: VimeoTextTrack[], trigger: Event) {\n  //   for (const init of tracks) {\n  //     const textTrack = new TextTrack({\n  //       ...init,\n  //       label: init.label.replace('auto-generated', 'auto'),\n  //     });\n  //     textTrack[TextTrackSymbol.readyState] = 2;\n  //     this.#ctx.textTracks.add(textTrack, trigger);\n  //     textTrack.setMode(init.mode, trigger);\n  //   }\n  // }\n  // #onCueChange(cue: VimeoTextCue, trigger: Event) {\n  //   const { textTracks, $state } = this.#ctx,\n  //     { currentTime } = $state,\n  //     track = textTracks.selected;\n  //   if (this.#currentCue) track?.removeCue(this.#currentCue, trigger);\n  //   this.#currentCue = new window.VTTCue(currentTime(), Number.MAX_SAFE_INTEGER, cue.text);\n  //   track?.addCue(this.#currentCue, trigger);\n  // }\n  #onChaptersChange(chapters) {\n    this.#removeChapters();\n    if (!chapters.length) return;\n    const track = new TextTrack({\n      kind: \"chapters\",\n      default: true\n    }), { seekableEnd } = this.#ctx.$state;\n    for (let i = 0; i < chapters.length; i++) {\n      const chapter = chapters[i], nextChapter = chapters[i + 1];\n      track.addCue(\n        new window.VTTCue(\n          chapter.startTime,\n          nextChapter?.startTime ?? seekableEnd(),\n          chapter.title\n        )\n      );\n    }\n    this.#chaptersTrack = track;\n    this.#ctx.textTracks.add(track);\n  }\n  #removeChapters() {\n    if (!this.#chaptersTrack) return;\n    this.#ctx.textTracks.remove(this.#chaptersTrack);\n    this.#chaptersTrack = null;\n  }\n  #onQualitiesChange(qualities, trigger) {\n    this.#ctx.qualities[QualitySymbol.enableAuto] = qualities.some((q) => q.id === \"auto\") ? () => this.#remote(\"setQuality\", \"auto\") : void 0;\n    for (const quality of qualities) {\n      if (quality.id === \"auto\") continue;\n      const height = +quality.id.slice(0, -1);\n      if (isNaN(height)) continue;\n      this.#ctx.qualities[ListSymbol.add](\n        {\n          id: quality.id,\n          width: height * (16 / 9),\n          height,\n          codec: \"avc1,h.264\",\n          bitrate: -1\n        },\n        trigger\n      );\n    }\n    this.#onQualityChange(\n      qualities.find((q) => q.active),\n      trigger\n    );\n  }\n  #onQualityChange({ id } = {}, trigger) {\n    if (!id) return;\n    const isAuto = id === \"auto\", newQuality = this.#ctx.qualities.getById(id);\n    if (isAuto) {\n      this.#ctx.qualities[QualitySymbol.setAuto](isAuto, trigger);\n      this.#ctx.qualities[ListSymbol.select](void 0, true, trigger);\n    } else {\n      this.#ctx.qualities[ListSymbol.select](newQuality ?? void 0, true, trigger);\n    }\n  }\n  #onEvent(event, payload, trigger) {\n    switch (event) {\n      case \"ready\":\n        this.#attachListeners();\n        break;\n      case \"loaded\":\n        this.#onLoaded(trigger);\n        break;\n      case \"play\":\n        this.#onPlay(trigger);\n        break;\n      case \"playProgress\":\n        this.#onPlayProgress(trigger);\n        break;\n      case \"pause\":\n        this.#onPause(trigger);\n        break;\n      case \"loadProgress\":\n        this.#onLoadProgress(payload.seconds, trigger);\n        break;\n      case \"waiting\":\n        this.#onWaiting(trigger);\n        break;\n      case \"bufferstart\":\n        this.#onBufferStart(trigger);\n        break;\n      case \"bufferend\":\n        this.#onBufferEnd(trigger);\n        break;\n      case \"volumechange\":\n        this.#onVolumeChange(payload.volume, peek(this.#ctx.$state.muted), trigger);\n        break;\n      case \"durationchange\":\n        this.#seekableRange = new TimeRange(0, payload.duration);\n        this.#ctx.notify(\"duration-change\", payload.duration, trigger);\n        break;\n      case \"playbackratechange\":\n        this.#ctx.notify(\"rate-change\", payload.playbackRate, trigger);\n        break;\n      case \"qualitychange\":\n        this.#onQualityChange(payload, trigger);\n        break;\n      case \"fullscreenchange\":\n        this.#fullscreenActive = payload.fullscreen;\n        this.#ctx.notify(\"fullscreen-change\", payload.fullscreen, trigger);\n        break;\n      case \"enterpictureinpicture\":\n        this.#ctx.notify(\"picture-in-picture-change\", true, trigger);\n        break;\n      case \"leavepictureinpicture\":\n        this.#ctx.notify(\"picture-in-picture-change\", false, trigger);\n        break;\n      case \"ended\":\n        this.#ctx.notify(\"end\", void 0, trigger);\n        break;\n      case \"error\":\n        this.#onError(payload, trigger);\n        break;\n      case \"seek\":\n      case \"seeked\":\n        this.#onSeeked(payload.seconds, trigger);\n        break;\n    }\n  }\n  #onError(error, trigger) {\n    const { message, method } = error;\n    if (method === \"setPlaybackRate\") {\n      this.#pro.set(false);\n    }\n    if (method) {\n      this.#getPromise(method)?.reject(message);\n    }\n    {\n      this.#ctx.logger?.errorGroup(`[vimeo]: ${message}`).labelledLog(\"Error\", error).labelledLog(\"Provider\", this).labelledLog(\"Event\", trigger).dispatch();\n    }\n  }\n  onMessage(message, event) {\n    if (message.event) {\n      this.#onEvent(message.event, message.data, event);\n    } else if (message.method) {\n      this.#onMethod(message.method, message.value, event);\n    }\n  }\n  onLoad() {\n  }\n  async #remote(command, arg) {\n    let promise = deferredPromise(), promises = this.#promises.get(command);\n    if (!promises) this.#promises.set(command, promises = []);\n    promises.push(promise);\n    this.postMessage({\n      method: command,\n      value: arg\n    });\n    return promise.promise;\n  }\n  #reset() {\n    this.#timeRAF.stop();\n    this.#seekableRange = new TimeRange(0, 0);\n    this.#videoInfoPromise = null;\n    this.#currentCue = null;\n    this.#pro.set(false);\n    this.#removeChapters();\n  }\n  #getPromise(command) {\n    return this.#promises.get(command)?.shift();\n  }\n}\n\nexport { VimeoProvider };\n","\"use client\"\n\nimport { appendParamsToURL, IS_SERVER } from './vidstack-DUlCophs.js';\nimport { signal, listenEvent, effect, peek, isString } from './vidstack-D_bWd66h.js';\n\nclass EmbedProvider {\n  #iframe;\n  src = signal(\"\");\n  /**\n   * Defines which referrer is sent when fetching the resource.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy}\n   */\n  referrerPolicy = null;\n  get iframe() {\n    return this.#iframe;\n  }\n  constructor(iframe) {\n    this.#iframe = iframe;\n    iframe.setAttribute(\"frameBorder\", \"0\");\n    iframe.setAttribute(\"aria-hidden\", \"true\");\n    iframe.setAttribute(\n      \"allow\",\n      \"autoplay; fullscreen; encrypted-media; picture-in-picture; accelerometer; gyroscope\"\n    );\n    if (this.referrerPolicy !== null) {\n      iframe.setAttribute(\"referrerpolicy\", this.referrerPolicy);\n    }\n  }\n  setup() {\n    listenEvent(window, \"message\", this.#onWindowMessage.bind(this));\n    listenEvent(this.#iframe, \"load\", this.onLoad.bind(this));\n    effect(this.#watchSrc.bind(this));\n  }\n  #watchSrc() {\n    const src = this.src();\n    if (!src.length) {\n      this.#iframe.setAttribute(\"src\", \"\");\n      return;\n    }\n    const params = peek(() => this.buildParams());\n    this.#iframe.setAttribute(\"src\", appendParamsToURL(src, params));\n  }\n  postMessage(message, target) {\n    if (IS_SERVER) return;\n    this.#iframe.contentWindow?.postMessage(JSON.stringify(message), target ?? \"*\");\n  }\n  #onWindowMessage(event) {\n    const origin = this.getOrigin(), isOriginMatch = (event.source === null || event.source === this.#iframe?.contentWindow) && (!isString(origin) || origin === event.origin);\n    if (!isOriginMatch) return;\n    try {\n      const message = JSON.parse(event.data);\n      if (message) this.onMessage(message, event);\n      return;\n    } catch (e) {\n    }\n    if (event.data) this.onMessage(event.data, event);\n  }\n}\n\nexport { EmbedProvider };\n","\"use client\"\n\nconst videoIdRE = /(?:https:\\/\\/)?(?:player\\.)?vimeo(?:\\.com)?\\/(?:video\\/)?(\\d+)(?:(?:\\?hash=|\\?h=|\\/)(.*))?/;\nconst infoCache = /* @__PURE__ */ new Map();\nconst pendingFetch = /* @__PURE__ */ new Map();\nfunction resolveVimeoVideoId(src) {\n  const matches = src.match(videoIdRE);\n  return { videoId: matches?.[1], hash: matches?.[2] };\n}\nasync function getVimeoVideoInfo(videoId, abort, videoHash) {\n  if (infoCache.has(videoId)) return infoCache.get(videoId);\n  if (pendingFetch.has(videoId)) return pendingFetch.get(videoId);\n  let oembedSrc = `https://vimeo.com/api/oembed.json?url=https://player.vimeo.com/video/${videoId}`;\n  if (videoHash) {\n    oembedSrc = oembedSrc.concat(`?h=${videoHash}`);\n  }\n  const promise = window.fetch(oembedSrc, {\n    mode: \"cors\",\n    signal: abort.signal\n  }).then((response) => response.json()).then((data) => {\n    const thumnailRegex = /vimeocdn.com\\/video\\/(.*)?_/, thumbnailId = data?.thumbnail_url?.match(thumnailRegex)?.[1], poster = thumbnailId ? `https://i.vimeocdn.com/video/${thumbnailId}_1920x1080.webp` : \"\", info = {\n      title: data?.title ?? \"\",\n      duration: data?.duration ?? 0,\n      poster,\n      pro: data.account_type !== \"basic\"\n    };\n    infoCache.set(videoId, info);\n    return info;\n  }).finally(() => pendingFetch.delete(videoId));\n  pendingFetch.set(videoId, promise);\n  return promise;\n}\n\nexport { getVimeoVideoInfo, resolveVimeoVideoId };\n"],"names":[],"sourceRoot":""}