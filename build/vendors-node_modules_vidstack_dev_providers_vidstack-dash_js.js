"use strict";
(globalThis["webpackChunkfb_blocks"] = globalThis["webpackChunkfb_blocks"] || []).push([["vendors-node_modules_vidstack_dev_providers_vidstack-dash_js"],{

/***/ "./node_modules/vidstack/dev/providers/vidstack-dash.js":
/*!**************************************************************!*\
  !*** ./node_modules/vidstack/dev/providers/vidstack-dash.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DASHProvider: () => (/* binding */ DASHProvider)
/* harmony export */ });
/* harmony import */ var _chunks_vidstack_zG6PIeGg_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../chunks/vidstack-zG6PIeGg.js */ "./node_modules/vidstack/dev/chunks/vidstack-zG6PIeGg.js");
/* harmony import */ var _chunks_vidstack_CjhKISI0_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../chunks/vidstack-CjhKISI0.js */ "./node_modules/vidstack/dev/chunks/vidstack-CjhKISI0.js");
/* harmony import */ var _vidstack_video_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./vidstack-video.js */ "./node_modules/vidstack/dev/providers/vidstack-video.js");
/* harmony import */ var _chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunks/vidstack-Bu2kfzUd.js */ "./node_modules/vidstack/dev/chunks/vidstack-Bu2kfzUd.js");
/* harmony import */ var _chunks_vidstack_Bpr4fI4n_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunks/vidstack-Bpr4fI4n.js */ "./node_modules/vidstack/dev/chunks/vidstack-Bpr4fI4n.js");
/* harmony import */ var _chunks_vidstack_BYNmVJLa_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../chunks/vidstack-BYNmVJLa.js */ "./node_modules/vidstack/dev/chunks/vidstack-BYNmVJLa.js");
/* harmony import */ var _chunks_vidstack_Dv_LIPFu_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../chunks/vidstack-Dv_LIPFu.js */ "./node_modules/vidstack/dev/chunks/vidstack-Dv_LIPFu.js");
/* harmony import */ var _chunks_vidstack_qh1N5_f_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chunks/vidstack-qh1N5_f_.js */ "./node_modules/vidstack/dev/chunks/vidstack-qh1N5_f_.js");
/* harmony import */ var _chunks_vidstack_DbBJlz7I_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../chunks/vidstack-DbBJlz7I.js */ "./node_modules/vidstack/dev/chunks/vidstack-DbBJlz7I.js");














function getLangName(langCode) {
  try {
    const displayNames = new Intl.DisplayNames(navigator.languages, { type: "language" });
    const languageName = displayNames.of(langCode);
    return languageName ?? null;
  } catch (err) {
    return null;
  }
}

const toDOMEventType = (type) => `dash-${(0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.camelToKebabCase)(type)}`;
class DASHController {
  #video;
  #ctx;
  #instance = null;
  #callbacks = /* @__PURE__ */ new Set();
  #stopLiveSync = null;
  config = {};
  get instance() {
    return this.#instance;
  }
  constructor(video, ctx) {
    this.#video = video;
    this.#ctx = ctx;
  }
  setup(ctor) {
    this.#instance = ctor().create();
    const dispatcher = this.#dispatchDASHEvent.bind(this);
    for (const event of Object.values(ctor.events)) this.#instance.on(event, dispatcher);
    this.#instance.on(ctor.events.ERROR, this.#onError.bind(this));
    for (const callback of this.#callbacks) callback(this.#instance);
    this.#ctx.player.dispatch("dash-instance", {
      detail: this.#instance
    });
    this.#instance.initialize(this.#video, void 0, false);
    this.#instance.updateSettings({
      streaming: {
        text: {
          // Disabling text rendering by dash.
          defaultEnabled: false,
          dispatchForManualRendering: true
        },
        buffer: {
          /// Enables buffer replacement when switching bitrates for faster switching.
          fastSwitchEnabled: true
        }
      },
      ...this.config
    });
    this.#instance.on(ctor.events.FRAGMENT_LOADING_STARTED, this.#onFragmentLoadStart.bind(this));
    this.#instance.on(
      ctor.events.FRAGMENT_LOADING_COMPLETED,
      this.#onFragmentLoadComplete.bind(this)
    );
    this.#instance.on(ctor.events.MANIFEST_LOADED, this.#onManifestLoaded.bind(this));
    this.#instance.on(ctor.events.QUALITY_CHANGE_RENDERED, this.#onQualityChange.bind(this));
    this.#instance.on(ctor.events.TEXT_TRACKS_ADDED, this.#onTextTracksAdded.bind(this));
    this.#instance.on(ctor.events.TRACK_CHANGE_RENDERED, this.#onTrackChange.bind(this));
    this.#ctx.qualities[_chunks_vidstack_Bpr4fI4n_js__WEBPACK_IMPORTED_MODULE_1__.QualitySymbol.enableAuto] = this.#enableAutoQuality.bind(this);
    (0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.listenEvent)(this.#ctx.qualities, "change", this.#onUserQualityChange.bind(this));
    (0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.listenEvent)(this.#ctx.audioTracks, "change", this.#onUserAudioChange.bind(this));
    this.#stopLiveSync = (0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.effect)(this.#liveSync.bind(this));
  }
  #createDOMEvent(event) {
    return new _chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.DOMEvent(toDOMEventType(event.type), { detail: event });
  }
  #liveSync() {
    if (!this.#ctx.$state.live()) return;
    const raf = new _chunks_vidstack_qh1N5_f_js__WEBPACK_IMPORTED_MODULE_2__.RAFLoop(this.#liveSyncPosition.bind(this));
    raf.start();
    return raf.stop.bind(raf);
  }
  #liveSyncPosition() {
    if (!this.#instance) return;
    const position = this.#instance.duration() - this.#instance.time();
    this.#ctx.$state.liveSyncPosition.set(!isNaN(position) ? position : Infinity);
  }
  #dispatchDASHEvent(event) {
    this.#ctx.player?.dispatch(this.#createDOMEvent(event));
  }
  #currentTrack = null;
  #cueTracker = {};
  #onTextFragmentLoaded(event) {
    const native = this.#currentTrack?.[_chunks_vidstack_BYNmVJLa_js__WEBPACK_IMPORTED_MODULE_3__.TextTrackSymbol.native], cues = (native?.track).cues;
    if (!native || !cues) return;
    const id = this.#currentTrack.id, startIndex = this.#cueTracker[id] ?? 0, trigger = this.#createDOMEvent(event);
    for (let i = startIndex; i < cues.length; i++) {
      const cue = cues[i];
      if (!cue.positionAlign) cue.positionAlign = "auto";
      this.#currentTrack.addCue(cue, trigger);
    }
    this.#cueTracker[id] = cues.length;
  }
  #onTextTracksAdded(event) {
    if (!this.#instance) return;
    const data = event.tracks, nativeTextTracks = [...this.#video.textTracks].filter((track) => "manualMode" in track), trigger = this.#createDOMEvent(event);
    for (let i = 0; i < nativeTextTracks.length; i++) {
      const textTrackInfo = data[i], nativeTextTrack = nativeTextTracks[i];
      const id = `dash-${textTrackInfo.kind}-${i}`, track = new _chunks_vidstack_BYNmVJLa_js__WEBPACK_IMPORTED_MODULE_3__.TextTrack({
        id,
        label: textTrackInfo?.label ?? textTrackInfo.labels.find((t) => t.text)?.text ?? (textTrackInfo?.lang && getLangName(textTrackInfo.lang)) ?? textTrackInfo?.lang ?? void 0,
        language: textTrackInfo.lang ?? void 0,
        kind: textTrackInfo.kind,
        default: textTrackInfo.defaultTrack
      });
      track[_chunks_vidstack_BYNmVJLa_js__WEBPACK_IMPORTED_MODULE_3__.TextTrackSymbol.native] = {
        managed: true,
        track: nativeTextTrack
      };
      track[_chunks_vidstack_BYNmVJLa_js__WEBPACK_IMPORTED_MODULE_3__.TextTrackSymbol.readyState] = 2;
      track[_chunks_vidstack_BYNmVJLa_js__WEBPACK_IMPORTED_MODULE_3__.TextTrackSymbol.onModeChange] = () => {
        if (!this.#instance) return;
        if (track.mode === "showing") {
          this.#instance.setTextTrack(i);
          this.#currentTrack = track;
        } else {
          this.#instance.setTextTrack(-1);
          this.#currentTrack = null;
        }
      };
      this.#ctx.textTracks.add(track, trigger);
    }
  }
  #onTrackChange(event) {
    const { mediaType, newMediaInfo } = event;
    if (mediaType === "audio") {
      const track = this.#ctx.audioTracks.getById(`dash-audio-${newMediaInfo.index}`);
      if (track) {
        const trigger = this.#createDOMEvent(event);
        this.#ctx.audioTracks[_chunks_vidstack_Dv_LIPFu_js__WEBPACK_IMPORTED_MODULE_4__.ListSymbol.select](track, true, trigger);
      }
    }
  }
  #onQualityChange(event) {
    if (event.mediaType !== "video") return;
    const quality = this.#ctx.qualities[event.newQuality];
    if (quality) {
      const trigger = this.#createDOMEvent(event);
      this.#ctx.qualities[_chunks_vidstack_Dv_LIPFu_js__WEBPACK_IMPORTED_MODULE_4__.ListSymbol.select](quality, true, trigger);
    }
  }
  #onManifestLoaded(event) {
    if (this.#ctx.$state.canPlay() || !this.#instance) return;
    const { type, mediaPresentationDuration } = event.data, trigger = this.#createDOMEvent(event);
    this.#ctx.notify("stream-type-change", type !== "static" ? "live" : "on-demand", trigger);
    this.#ctx.notify("duration-change", mediaPresentationDuration, trigger);
    this.#ctx.qualities[_chunks_vidstack_Bpr4fI4n_js__WEBPACK_IMPORTED_MODULE_1__.QualitySymbol.setAuto](true, trigger);
    const media = this.#instance.getVideoElement();
    const videoQualities = this.#instance.getTracksForTypeFromManifest(
      "video",
      event.data
    );
    const supportedVideoMimeType = [...new Set(videoQualities.map((e) => e.mimeType))].find(
      (type2) => type2 && (0,_chunks_vidstack_CjhKISI0_js__WEBPACK_IMPORTED_MODULE_5__.canPlayVideoType)(media, type2)
    );
    const videoQuality = videoQualities.filter(
      (track) => supportedVideoMimeType === track.mimeType
    )[0];
    let audioTracks = this.#instance.getTracksForTypeFromManifest(
      "audio",
      event.data
    );
    const supportedAudioMimeType = [...new Set(audioTracks.map((e) => e.mimeType))].find(
      (type2) => type2 && (0,_chunks_vidstack_CjhKISI0_js__WEBPACK_IMPORTED_MODULE_5__.canPlayAudioType)(media, type2)
    );
    audioTracks = audioTracks.filter((track) => supportedAudioMimeType === track.mimeType);
    videoQuality.bitrateList.forEach((bitrate, index) => {
      const quality = {
        id: bitrate.id?.toString() ?? `dash-bitrate-${index}`,
        width: bitrate.width ?? 0,
        height: bitrate.height ?? 0,
        bitrate: bitrate.bandwidth ?? 0,
        codec: videoQuality.codec,
        index
      };
      this.#ctx.qualities[_chunks_vidstack_Dv_LIPFu_js__WEBPACK_IMPORTED_MODULE_4__.ListSymbol.add](quality, trigger);
    });
    if ((0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(videoQuality.index)) {
      const quality = this.#ctx.qualities[videoQuality.index];
      if (quality) this.#ctx.qualities[_chunks_vidstack_Dv_LIPFu_js__WEBPACK_IMPORTED_MODULE_4__.ListSymbol.select](quality, true, trigger);
    }
    audioTracks.forEach((audioTrack, index) => {
      const matchingLabel = audioTrack.labels.find((label2) => {
        return navigator.languages.some((language) => {
          return label2.lang && language.toLowerCase().startsWith(label2.lang.toLowerCase());
        });
      });
      const label = matchingLabel || audioTrack.labels[0];
      const localTrack = {
        id: `dash-audio-${audioTrack?.index}`,
        label: label?.text ?? (audioTrack.lang && getLangName(audioTrack.lang)) ?? audioTrack.lang ?? "",
        language: audioTrack.lang ?? "",
        kind: "main",
        mimeType: audioTrack.mimeType,
        codec: audioTrack.codec,
        index
      };
      this.#ctx.audioTracks[_chunks_vidstack_Dv_LIPFu_js__WEBPACK_IMPORTED_MODULE_4__.ListSymbol.add](localTrack, trigger);
    });
    media.dispatchEvent(new _chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.DOMEvent("canplay", { trigger }));
  }
  #onError(event) {
    const { type: eventType, error: data } = event;
    {
      this.#ctx.logger?.errorGroup(`[vidstack] DASH error \`${data.message}\``).labelledLog("Media Element", this.#video).labelledLog("DASH Instance", this.#instance).labelledLog("Event Type", eventType).labelledLog("Data", data).labelledLog("Src", (0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.peek)(this.#ctx.$state.source)).labelledLog("Media Store", { ...this.#ctx.$state }).dispatch();
    }
    switch (data.code) {
      case 27:
        this.#onNetworkError(data);
        break;
      default:
        this.#onFatalError(data);
        break;
    }
  }
  #onFragmentLoadStart() {
    if (this.#retryLoadingTimer >= 0) this.#clearRetryTimer();
  }
  #onFragmentLoadComplete(event) {
    const mediaType = event.mediaType;
    if (mediaType === "text") {
      requestAnimationFrame(this.#onTextFragmentLoaded.bind(this, event));
    }
  }
  #retryLoadingTimer = -1;
  #onNetworkError(error) {
    this.#clearRetryTimer();
    this.#instance?.play();
    this.#retryLoadingTimer = window.setTimeout(() => {
      this.#retryLoadingTimer = -1;
      this.#onFatalError(error);
    }, 5e3);
  }
  #clearRetryTimer() {
    clearTimeout(this.#retryLoadingTimer);
    this.#retryLoadingTimer = -1;
  }
  #onFatalError(error) {
    this.#ctx.notify("error", {
      message: error.message ?? "",
      code: 1,
      error
    });
  }
  #enableAutoQuality() {
    this.#switchAutoBitrate("video", true);
    const { qualities } = this.#ctx;
    this.#instance?.setQualityFor("video", qualities.selectedIndex, true);
  }
  #switchAutoBitrate(type, auto) {
    this.#instance?.updateSettings({
      streaming: { abr: { autoSwitchBitrate: { [type]: auto } } }
    });
  }
  #onUserQualityChange() {
    const { qualities } = this.#ctx;
    if (!this.#instance || qualities.auto || !qualities.selected) return;
    this.#switchAutoBitrate("video", false);
    this.#instance.setQualityFor("video", qualities.selectedIndex, qualities.switch === "current");
    if (_chunks_vidstack_CjhKISI0_js__WEBPACK_IMPORTED_MODULE_5__.IS_CHROME) {
      this.#video.currentTime = this.#video.currentTime;
    }
  }
  #onUserAudioChange() {
    if (!this.#instance) return;
    const { audioTracks } = this.#ctx, selectedTrack = this.#instance.getTracksFor("audio").find(
      (track) => audioTracks.selected && audioTracks.selected.id === `dash-audio-${track.index}`
    );
    if (selectedTrack) this.#instance.setCurrentTrack(selectedTrack);
  }
  #reset() {
    this.#clearRetryTimer();
    this.#currentTrack = null;
    this.#cueTracker = {};
  }
  onInstance(callback) {
    this.#callbacks.add(callback);
    return () => this.#callbacks.delete(callback);
  }
  loadSource(src) {
    this.#reset();
    if (!(0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.isString)(src.src)) return;
    this.#instance?.attachSource(src.src);
  }
  destroy() {
    this.#reset();
    this.#instance?.destroy();
    this.#instance = null;
    this.#stopLiveSync?.();
    this.#stopLiveSync = null;
    this.#ctx?.logger?.info("\u{1F3D7}\uFE0F Destroyed DASH instance");
  }
}

class DASHLibLoader {
  #lib;
  #ctx;
  #callback;
  constructor(lib, ctx, callback) {
    this.#lib = lib;
    this.#ctx = ctx;
    this.#callback = callback;
    this.#startLoading();
  }
  async #startLoading() {
    this.#ctx.logger?.info("\u{1F3D7}\uFE0F Loading DASH Library");
    const callbacks = {
      onLoadStart: this.#onLoadStart.bind(this),
      onLoaded: this.#onLoaded.bind(this),
      onLoadError: this.#onLoadError.bind(this)
    };
    let ctor = await loadDASHScript(this.#lib, callbacks);
    if ((0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(ctor) && !(0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.isString)(this.#lib)) ctor = await importDASH(this.#lib, callbacks);
    if (!ctor) return null;
    if (!window.dashjs.supportsMediaSource()) {
      const message = "[vidstack] `dash.js` is not supported in this environment";
      this.#ctx.logger?.error(message);
      this.#ctx.player.dispatch(new _chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.DOMEvent("dash-unsupported"));
      this.#ctx.notify("error", { message, code: 4 });
      return null;
    }
    return ctor;
  }
  #onLoadStart() {
    {
      this.#ctx.logger?.infoGroup("Starting to load `dash.js`").labelledLog("URL", this.#lib).dispatch();
    }
    this.#ctx.player.dispatch(new _chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.DOMEvent("dash-lib-load-start"));
  }
  #onLoaded(ctor) {
    {
      this.#ctx.logger?.infoGroup("Loaded `dash.js`").labelledLog("Library", this.#lib).labelledLog("Constructor", ctor).dispatch();
    }
    this.#ctx.player.dispatch(
      new _chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.DOMEvent("dash-lib-loaded", {
        detail: ctor
      })
    );
    this.#callback(ctor);
  }
  #onLoadError(e) {
    const error = (0,_chunks_vidstack_DbBJlz7I_js__WEBPACK_IMPORTED_MODULE_6__.coerceToError)(e);
    {
      this.#ctx.logger?.errorGroup("[vidstack] Failed to load `dash.js`").labelledLog("Library", this.#lib).labelledLog("Error", e).dispatch();
    }
    this.#ctx.player.dispatch(
      new _chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.DOMEvent("dash-lib-load-error", {
        detail: error
      })
    );
    this.#ctx.notify("error", {
      message: error.message,
      code: 4,
      error
    });
  }
}
async function importDASH(loader, callbacks = {}) {
  if ((0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(loader)) return void 0;
  callbacks.onLoadStart?.();
  if (isDASHConstructor(loader)) {
    callbacks.onLoaded?.(loader);
    return loader;
  }
  if (isDASHNamespace(loader)) {
    const ctor = loader.MediaPlayer;
    callbacks.onLoaded?.(ctor);
    return ctor;
  }
  try {
    const ctor = (await loader())?.default;
    if (isDASHNamespace(ctor)) {
      callbacks.onLoaded?.(ctor.MediaPlayer);
      return ctor.MediaPlayer;
    }
    if (ctor) {
      callbacks.onLoaded?.(ctor);
    } else {
      throw Error(
         true ? "[vidstack] failed importing `dash.js`. Dynamic import returned invalid object." : 0
      );
    }
    return ctor;
  } catch (err) {
    callbacks.onLoadError?.(err);
  }
  return void 0;
}
async function loadDASHScript(src, callbacks = {}) {
  if (!(0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.isString)(src)) return void 0;
  callbacks.onLoadStart?.();
  try {
    await (0,_chunks_vidstack_zG6PIeGg_js__WEBPACK_IMPORTED_MODULE_7__.loadScript)(src);
    if (!(0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(window.dashjs.MediaPlayer)) {
      throw Error(
         true ? "[vidstack] failed loading `dash.js`. Could not find a valid `Dash` constructor on window" : 0
      );
    }
    const ctor = window.dashjs.MediaPlayer;
    callbacks.onLoaded?.(ctor);
    return ctor;
  } catch (err) {
    callbacks.onLoadError?.(err);
  }
  return void 0;
}
function isDASHConstructor(value) {
  return value && value.prototype && value.prototype !== Function;
}
function isDASHNamespace(value) {
  return value && "MediaPlayer" in value;
}

const JS_DELIVR_CDN = "https://cdn.jsdelivr.net";
class DASHProvider extends _vidstack_video_js__WEBPACK_IMPORTED_MODULE_8__.VideoProvider {
  $$PROVIDER_TYPE = "DASH";
  #ctor = null;
  #controller = new DASHController(this.video, this.ctx);
  /**
   * The `dash.js` constructor.
   */
  get ctor() {
    return this.#ctor;
  }
  /**
   * The current `dash.js` instance.
   */
  get instance() {
    return this.#controller.instance;
  }
  /**
   * Whether `dash.js` is supported in this environment.
   */
  static supported = (0,_chunks_vidstack_CjhKISI0_js__WEBPACK_IMPORTED_MODULE_5__.isDASHSupported)();
  get type() {
    return "dash";
  }
  get canLiveSync() {
    return true;
  }
  #library = `${JS_DELIVR_CDN}/npm/dashjs@4.7.4/dist/dash${".all.debug.js" }`;
  /**
   * The `dash.js` configuration object.
   *
   * @see {@link https://cdn.dashjs.org/latest/jsdoc/module-Settings.html}
   */
  get config() {
    return this.#controller.config;
  }
  set config(config) {
    this.#controller.config = config;
  }
  /**
   * The `dash.js` constructor (supports dynamic imports) or a URL of where it can be found.
   *
   * @defaultValue `https://cdn.jsdelivr.net/npm/dashjs@4.7.4/dist/dash.all.min.js`
   */
  get library() {
    return this.#library;
  }
  set library(library) {
    this.#library = library;
  }
  preconnect() {
    if (!(0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.isString)(this.#library)) return;
    (0,_chunks_vidstack_zG6PIeGg_js__WEBPACK_IMPORTED_MODULE_7__.preconnect)(this.#library);
  }
  setup() {
    super.setup();
    new DASHLibLoader(this.#library, this.ctx, (ctor) => {
      this.#ctor = ctor;
      this.#controller.setup(ctor);
      this.ctx.notify("provider-setup", this);
      const src = (0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.peek)(this.ctx.$state.source);
      if (src) this.loadSource(src);
    });
  }
  async loadSource(src, preload) {
    if (!(0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.isString)(src.src)) {
      this.removeSource();
      return;
    }
    this.media.preload = preload || "";
    this.appendSource(src, "application/x-mpegurl");
    this.#controller.loadSource(src);
    this.currentSrc = src;
  }
  /**
   * The given callback is invoked when a new `dash.js` instance is created and right before it's
   * attached to media.
   */
  onInstance(callback) {
    const instance = this.#controller.instance;
    if (instance) callback(instance);
    return this.#controller.onInstance(callback);
  }
  destroy() {
    this.#controller.destroy();
  }
}




/***/ }),

/***/ "./node_modules/vidstack/dev/providers/vidstack-video.js":
/*!***************************************************************!*\
  !*** ./node_modules/vidstack/dev/providers/vidstack-video.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VideoProvider: () => (/* binding */ VideoProvider)
/* harmony export */ });
/* harmony import */ var _chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunks/vidstack-Bu2kfzUd.js */ "./node_modules/vidstack/dev/chunks/vidstack-Bu2kfzUd.js");
/* harmony import */ var _chunks_vidstack_CjhKISI0_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chunks/vidstack-CjhKISI0.js */ "./node_modules/vidstack/dev/chunks/vidstack-CjhKISI0.js");
/* harmony import */ var _vidstack_html_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-html.js */ "./node_modules/vidstack/dev/providers/vidstack-html.js");
/* harmony import */ var _chunks_vidstack_Bo5OTJ06_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../chunks/vidstack-Bo5OTJ06.js */ "./node_modules/vidstack/dev/chunks/vidstack-Bo5OTJ06.js");
/* harmony import */ var _chunks_vidstack_BYNmVJLa_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunks/vidstack-BYNmVJLa.js */ "./node_modules/vidstack/dev/chunks/vidstack-BYNmVJLa.js");











class NativeHLSTextTracks {
  #video;
  #ctx;
  constructor(video, ctx) {
    this.#video = video;
    this.#ctx = ctx;
    video.textTracks.onaddtrack = this.#onAddTrack.bind(this);
    (0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.onDispose)(this.#onDispose.bind(this));
  }
  #onAddTrack(event) {
    const nativeTrack = event.track;
    if (!nativeTrack || findTextTrackElement(this.#video, nativeTrack)) return;
    const track = new _chunks_vidstack_BYNmVJLa_js__WEBPACK_IMPORTED_MODULE_1__.TextTrack({
      id: nativeTrack.id,
      kind: nativeTrack.kind,
      label: nativeTrack.label ?? "",
      language: nativeTrack.language,
      type: "vtt"
    });
    track[_chunks_vidstack_BYNmVJLa_js__WEBPACK_IMPORTED_MODULE_1__.TextTrackSymbol.native] = { track: nativeTrack };
    track[_chunks_vidstack_BYNmVJLa_js__WEBPACK_IMPORTED_MODULE_1__.TextTrackSymbol.readyState] = 2;
    track[_chunks_vidstack_BYNmVJLa_js__WEBPACK_IMPORTED_MODULE_1__.TextTrackSymbol.nativeHLS] = true;
    let lastIndex = 0;
    const onCueChange = (event2) => {
      if (!nativeTrack.cues) return;
      for (let i = lastIndex; i < nativeTrack.cues.length; i++) {
        track.addCue(nativeTrack.cues[i], event2);
        lastIndex++;
      }
    };
    onCueChange(event);
    nativeTrack.oncuechange = onCueChange;
    this.#ctx.textTracks.add(track, event);
    track.setMode(nativeTrack.mode, event);
  }
  #onDispose() {
    this.#video.textTracks.onaddtrack = null;
    for (const track of this.#ctx.textTracks) {
      const nativeTrack = track[_chunks_vidstack_BYNmVJLa_js__WEBPACK_IMPORTED_MODULE_1__.TextTrackSymbol.native]?.track;
      if (nativeTrack?.oncuechange) nativeTrack.oncuechange = null;
    }
  }
}
function findTextTrackElement(video, track) {
  return Array.from(video.children).find((el) => el.track === track);
}

class VideoPictureInPicture {
  #video;
  #media;
  constructor(video, media) {
    this.#video = video;
    this.#media = media;
    new _chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.EventsController(video).add("enterpictureinpicture", this.#onEnter.bind(this)).add("leavepictureinpicture", this.#onExit.bind(this));
  }
  get active() {
    return document.pictureInPictureElement === this.#video;
  }
  get supported() {
    return (0,_chunks_vidstack_CjhKISI0_js__WEBPACK_IMPORTED_MODULE_2__.canUsePictureInPicture)(this.#video);
  }
  async enter() {
    return this.#video.requestPictureInPicture();
  }
  exit() {
    return document.exitPictureInPicture();
  }
  #onEnter(event) {
    this.#onChange(true, event);
  }
  #onExit(event) {
    this.#onChange(false, event);
  }
  #onChange = (active, event) => {
    this.#media.notify("picture-in-picture-change", active, event);
  };
}

class VideoPresentation {
  #video;
  #media;
  #mode = "inline";
  get mode() {
    return this.#mode;
  }
  constructor(video, media) {
    this.#video = video;
    this.#media = media;
    (0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.listenEvent)(video, "webkitpresentationmodechanged", this.#onModeChange.bind(this));
  }
  get supported() {
    return (0,_chunks_vidstack_CjhKISI0_js__WEBPACK_IMPORTED_MODULE_2__.canUseVideoPresentation)(this.#video);
  }
  async setPresentationMode(mode) {
    if (this.#mode === mode) return;
    this.#video.webkitSetPresentationMode(mode);
  }
  #onModeChange(event) {
    const prevMode = this.#mode;
    this.#mode = this.#video.webkitPresentationMode;
    {
      this.#media.logger?.infoGroup("presentation mode change").labelledLog("Mode", this.#mode).labelledLog("Event", event).dispatch();
    }
    this.#media.player?.dispatch(
      new _chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.DOMEvent("video-presentation-change", {
        detail: this.#mode,
        trigger: event
      })
    );
    ["fullscreen", "picture-in-picture"].forEach((type) => {
      if (this.#mode === type || prevMode === type) {
        this.#media.notify(`${type}-change`, this.#mode === type, event);
      }
    });
  }
}
class FullscreenPresentationAdapter {
  #presentation;
  get active() {
    return this.#presentation.mode === "fullscreen";
  }
  get supported() {
    return this.#presentation.supported;
  }
  constructor(presentation) {
    this.#presentation = presentation;
  }
  async enter() {
    this.#presentation.setPresentationMode("fullscreen");
  }
  async exit() {
    this.#presentation.setPresentationMode("inline");
  }
}
class PIPPresentationAdapter {
  #presentation;
  get active() {
    return this.#presentation.mode === "picture-in-picture";
  }
  get supported() {
    return this.#presentation.supported;
  }
  constructor(presentation) {
    this.#presentation = presentation;
  }
  async enter() {
    this.#presentation.setPresentationMode("picture-in-picture");
  }
  async exit() {
    this.#presentation.setPresentationMode("inline");
  }
}

class VideoProvider extends _vidstack_html_js__WEBPACK_IMPORTED_MODULE_3__.HTMLMediaProvider {
  $$PROVIDER_TYPE = "VIDEO";
  get type() {
    return "video";
  }
  airPlay;
  fullscreen;
  pictureInPicture;
  constructor(video, ctx) {
    super(video, ctx);
    (0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.scoped)(() => {
      this.airPlay = new _chunks_vidstack_Bo5OTJ06_js__WEBPACK_IMPORTED_MODULE_4__.HTMLAirPlayAdapter(video, ctx);
      if ((0,_chunks_vidstack_CjhKISI0_js__WEBPACK_IMPORTED_MODULE_2__.canUseVideoPresentation)(video)) {
        const presentation = new VideoPresentation(video, ctx);
        this.fullscreen = new FullscreenPresentationAdapter(presentation);
        this.pictureInPicture = new PIPPresentationAdapter(presentation);
      } else if ((0,_chunks_vidstack_CjhKISI0_js__WEBPACK_IMPORTED_MODULE_2__.canUsePictureInPicture)(video)) {
        this.pictureInPicture = new VideoPictureInPicture(video, ctx);
      }
    }, this.scope);
  }
  setup() {
    super.setup();
    if ((0,_chunks_vidstack_CjhKISI0_js__WEBPACK_IMPORTED_MODULE_2__.canPlayHLSNatively)(this.video)) {
      new NativeHLSTextTracks(this.video, this.ctx);
    }
    this.ctx.textRenderers.attachVideo(this.video);
    (0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.onDispose)(() => {
      this.ctx.textRenderers.attachVideo(null);
    });
    if (this.type === "video") this.ctx.notify("provider-setup", this);
  }
  /**
   * The native HTML `<video>` element.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement}
   */
  get video() {
    return this.media;
  }
}




/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_vidstack_dev_providers_vidstack-dash_js.js.map?ver=4189e9487cbca5d26176