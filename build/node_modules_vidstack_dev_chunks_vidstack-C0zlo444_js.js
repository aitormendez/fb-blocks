"use strict";
(globalThis["webpackChunkfb_blocks"] = globalThis["webpackChunkfb_blocks"] || []).push([["node_modules_vidstack_dev_chunks_vidstack-C0zlo444_js"],{

/***/ "./node_modules/vidstack/dev/chunks/vidstack-C0zlo444.js":
/*!***************************************************************!*\
  !*** ./node_modules/vidstack/dev/chunks/vidstack-C0zlo444.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GoogleCastLoader: () => (/* binding */ GoogleCastLoader)
/* harmony export */ });
/* harmony import */ var _vidstack_CjhKISI0_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-CjhKISI0.js */ "./node_modules/vidstack/dev/chunks/vidstack-CjhKISI0.js");
/* harmony import */ var _vidstack_zG6PIeGg_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-zG6PIeGg.js */ "./node_modules/vidstack/dev/chunks/vidstack-zG6PIeGg.js");
/* harmony import */ var _vidstack_DDwbYVHV_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-DDwbYVHV.js */ "./node_modules/vidstack/dev/chunks/vidstack-DDwbYVHV.js");
/* harmony import */ var _vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vidstack-Bu2kfzUd.js */ "./node_modules/vidstack/dev/chunks/vidstack-Bu2kfzUd.js");





class GoogleCastLoader {
  name = "google-cast";
  target;
  #player;
  /**
   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}
   */
  get cast() {
    return (0,_vidstack_DDwbYVHV_js__WEBPACK_IMPORTED_MODULE_0__.getCastContext)();
  }
  mediaType() {
    return "video";
  }
  canPlay(src) {
    return _vidstack_CjhKISI0_js__WEBPACK_IMPORTED_MODULE_1__.IS_CHROME && !_vidstack_CjhKISI0_js__WEBPACK_IMPORTED_MODULE_1__.IS_IOS && (0,_vidstack_CjhKISI0_js__WEBPACK_IMPORTED_MODULE_1__.canGoogleCastSrc)(src);
  }
  async prompt(ctx) {
    let loadEvent, openEvent, errorEvent;
    try {
      loadEvent = await this.#loadCastFramework(ctx);
      if (!this.#player) {
        this.#player = new cast.framework.RemotePlayer();
        new cast.framework.RemotePlayerController(this.#player);
      }
      openEvent = ctx.player.createEvent("google-cast-prompt-open", {
        trigger: loadEvent
      });
      ctx.player.dispatchEvent(openEvent);
      this.#notifyRemoteStateChange(ctx, "connecting", openEvent);
      await this.#showPrompt((0,_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_2__.peek)(ctx.$props.googleCast));
      ctx.$state.remotePlaybackInfo.set({
        deviceName: (0,_vidstack_DDwbYVHV_js__WEBPACK_IMPORTED_MODULE_0__.getCastSession)()?.getCastDevice().friendlyName
      });
      if ((0,_vidstack_DDwbYVHV_js__WEBPACK_IMPORTED_MODULE_0__.isCastConnected)()) this.#notifyRemoteStateChange(ctx, "connected", openEvent);
    } catch (code) {
      const error = code instanceof Error ? code : this.#createError(
        (code + "").toUpperCase(),
        "Prompt failed."
      );
      errorEvent = ctx.player.createEvent("google-cast-prompt-error", {
        detail: error,
        trigger: openEvent ?? loadEvent,
        cancelable: true
      });
      ctx.player.dispatch(errorEvent);
      this.#notifyRemoteStateChange(
        ctx,
        (0,_vidstack_DDwbYVHV_js__WEBPACK_IMPORTED_MODULE_0__.isCastConnected)() ? "connected" : "disconnected",
        errorEvent
      );
      throw error;
    } finally {
      ctx.player.dispatch("google-cast-prompt-close", {
        trigger: errorEvent ?? openEvent ?? loadEvent
      });
    }
  }
  async load(ctx) {
    if (!this.#player) {
      throw Error("[vidstack] google cast player was not initialized");
    }
    return new (await __webpack_require__.e(/*! import() */ "vendors-node_modules_vidstack_dev_providers_vidstack-google-cast_js").then(__webpack_require__.bind(__webpack_require__, /*! ../providers/vidstack-google-cast.js */ "./node_modules/vidstack/dev/providers/vidstack-google-cast.js"))).GoogleCastProvider(this.#player, ctx);
  }
  async #loadCastFramework(ctx) {
    if ((0,_vidstack_DDwbYVHV_js__WEBPACK_IMPORTED_MODULE_0__.hasLoadedCastFramework)()) return;
    const loadStartEvent = ctx.player.createEvent("google-cast-load-start");
    ctx.player.dispatch(loadStartEvent);
    await (0,_vidstack_zG6PIeGg_js__WEBPACK_IMPORTED_MODULE_3__.loadScript)((0,_vidstack_DDwbYVHV_js__WEBPACK_IMPORTED_MODULE_0__.getCastFrameworkURL)());
    await customElements.whenDefined("google-cast-launcher");
    const loadedEvent = ctx.player.createEvent("google-cast-loaded", { trigger: loadStartEvent });
    ctx.player.dispatch(loadedEvent);
    if (!(0,_vidstack_DDwbYVHV_js__WEBPACK_IMPORTED_MODULE_0__.isCastAvailable)()) {
      throw this.#createError("CAST_NOT_AVAILABLE", "Google Cast not available on this platform.");
    }
    return loadedEvent;
  }
  async #showPrompt(options) {
    this.#setOptions(options);
    const errorCode = await this.cast.requestSession();
    if (errorCode) {
      throw this.#createError(
        errorCode.toUpperCase(),
        (0,_vidstack_DDwbYVHV_js__WEBPACK_IMPORTED_MODULE_0__.getCastErrorMessage)(errorCode)
      );
    }
  }
  #setOptions(options) {
    this.cast?.setOptions({
      ...(0,_vidstack_DDwbYVHV_js__WEBPACK_IMPORTED_MODULE_0__.getDefaultCastOptions)(),
      ...options
    });
  }
  #notifyRemoteStateChange(ctx, state, trigger) {
    const detail = { type: "google-cast", state };
    ctx.notify("remote-playback-change", detail, trigger);
  }
  #createError(code, message) {
    const error = Error(message);
    error.code = code;
    return error;
  }
}




/***/ }),

/***/ "./node_modules/vidstack/dev/chunks/vidstack-DDwbYVHV.js":
/*!***************************************************************!*\
  !*** ./node_modules/vidstack/dev/chunks/vidstack-DDwbYVHV.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getCastContext: () => (/* binding */ getCastContext),
/* harmony export */   getCastErrorMessage: () => (/* binding */ getCastErrorMessage),
/* harmony export */   getCastFrameworkURL: () => (/* binding */ getCastFrameworkURL),
/* harmony export */   getCastSession: () => (/* binding */ getCastSession),
/* harmony export */   getCastSessionMedia: () => (/* binding */ getCastSessionMedia),
/* harmony export */   getDefaultCastOptions: () => (/* binding */ getDefaultCastOptions),
/* harmony export */   hasActiveCastSession: () => (/* binding */ hasActiveCastSession),
/* harmony export */   hasLoadedCastFramework: () => (/* binding */ hasLoadedCastFramework),
/* harmony export */   isCastAvailable: () => (/* binding */ isCastAvailable),
/* harmony export */   isCastConnected: () => (/* binding */ isCastConnected),
/* harmony export */   listenCastContextEvent: () => (/* binding */ listenCastContextEvent)
/* harmony export */ });
/* harmony import */ var _vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-Bu2kfzUd.js */ "./node_modules/vidstack/dev/chunks/vidstack-Bu2kfzUd.js");


function getCastFrameworkURL() {
  return "https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1";
}
function hasLoadedCastFramework() {
  return !!window.cast?.framework;
}
function isCastAvailable() {
  return !!window.chrome?.cast?.isAvailable;
}
function isCastConnected() {
  return getCastContext().getCastState() === cast.framework.CastState.CONNECTED;
}
function getCastContext() {
  return window.cast.framework.CastContext.getInstance();
}
function getCastSession() {
  return getCastContext().getCurrentSession();
}
function getCastSessionMedia() {
  return getCastSession()?.getSessionObj().media[0];
}
function hasActiveCastSession(src) {
  const contentId = getCastSessionMedia()?.media.contentId;
  return contentId === src?.src;
}
function getDefaultCastOptions() {
  return {
    language: "en-US",
    autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,
    receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID,
    resumeSavedSession: true,
    androidReceiverCompatible: true
  };
}
function getCastErrorMessage(code) {
  const defaultMessage = `Google Cast Error Code: ${code}`;
  {
    switch (code) {
      case chrome.cast.ErrorCode.API_NOT_INITIALIZED:
        return "The API is not initialized.";
      case chrome.cast.ErrorCode.CANCEL:
        return "The operation was canceled by the user";
      case chrome.cast.ErrorCode.CHANNEL_ERROR:
        return "A channel to the receiver is not available.";
      case chrome.cast.ErrorCode.EXTENSION_MISSING:
        return "The Cast extension is not available.";
      case chrome.cast.ErrorCode.INVALID_PARAMETER:
        return "The parameters to the operation were not valid.";
      case chrome.cast.ErrorCode.RECEIVER_UNAVAILABLE:
        return "No receiver was compatible with the session request.";
      case chrome.cast.ErrorCode.SESSION_ERROR:
        return "A session could not be created, or a session was invalid.";
      case chrome.cast.ErrorCode.TIMEOUT:
        return "The operation timed out.";
      default:
        return defaultMessage;
    }
  }
}
function listenCastContextEvent(type, handler) {
  return (0,_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.listenEvent)(getCastContext(), type, handler);
}




/***/ })

}]);
//# sourceMappingURL=node_modules_vidstack_dev_chunks_vidstack-C0zlo444_js.js.map?ver=84dc6a2ddaa7fb4d925b