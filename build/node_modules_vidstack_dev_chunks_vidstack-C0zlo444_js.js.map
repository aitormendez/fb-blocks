{"version":3,"file":"node_modules_vidstack_dev_chunks_vidstack-C0zlo444_js.js?ver=84dc6a2ddaa7fb4d925b","mappings":";;;;;;;;;;;;;;;;;AAA6E;AACzB;AAC+I;AACrJ;;AAE9C;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW,qEAAc;AACzB;AACA;AACA;AACA;AACA;AACA,WAAW,4DAAS,KAAK,yDAAM,IAAI,uEAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,6BAA6B,2DAAI;AACjC;AACA,oBAAoB,qEAAc;AAClC,OAAO;AACP,UAAU,sEAAe;AACzB,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,QAAQ,sEAAe;AACvB;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6QAA8C;AACpE;AACA;AACA,QAAQ,6EAAsB;AAC9B;AACA;AACA,UAAU,iEAAU,CAAC,0EAAmB;AACxC;AACA,uEAAuE,yBAAyB;AAChG;AACA,SAAS,sEAAe;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAmB;AAC3B;AACA;AACA;AACA;AACA;AACA,SAAS,4EAAqB;AAC9B;AACA,KAAK;AACL;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE4B;;;;;;;;;;;;;;;;;;;;;;;;;;AC5GyB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,KAAK;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,kEAAW;AACpB;;AAEwO","sources":["webpack://fb-blocks/./node_modules/vidstack/dev/chunks/vidstack-C0zlo444.js","webpack://fb-blocks/./node_modules/vidstack/dev/chunks/vidstack-DDwbYVHV.js"],"sourcesContent":["import { IS_CHROME, canGoogleCastSrc, IS_IOS } from './vidstack-CjhKISI0.js';\nimport { loadScript } from './vidstack-zG6PIeGg.js';\nimport { getCastContext, getCastSession, isCastConnected, hasLoadedCastFramework, getCastFrameworkURL, isCastAvailable, getCastErrorMessage, getDefaultCastOptions } from './vidstack-DDwbYVHV.js';\nimport { peek } from './vidstack-Bu2kfzUd.js';\n\nclass GoogleCastLoader {\n  name = \"google-cast\";\n  target;\n  #player;\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */\n  get cast() {\n    return getCastContext();\n  }\n  mediaType() {\n    return \"video\";\n  }\n  canPlay(src) {\n    return IS_CHROME && !IS_IOS && canGoogleCastSrc(src);\n  }\n  async prompt(ctx) {\n    let loadEvent, openEvent, errorEvent;\n    try {\n      loadEvent = await this.#loadCastFramework(ctx);\n      if (!this.#player) {\n        this.#player = new cast.framework.RemotePlayer();\n        new cast.framework.RemotePlayerController(this.#player);\n      }\n      openEvent = ctx.player.createEvent(\"google-cast-prompt-open\", {\n        trigger: loadEvent\n      });\n      ctx.player.dispatchEvent(openEvent);\n      this.#notifyRemoteStateChange(ctx, \"connecting\", openEvent);\n      await this.#showPrompt(peek(ctx.$props.googleCast));\n      ctx.$state.remotePlaybackInfo.set({\n        deviceName: getCastSession()?.getCastDevice().friendlyName\n      });\n      if (isCastConnected()) this.#notifyRemoteStateChange(ctx, \"connected\", openEvent);\n    } catch (code) {\n      const error = code instanceof Error ? code : this.#createError(\n        (code + \"\").toUpperCase(),\n        \"Prompt failed.\"\n      );\n      errorEvent = ctx.player.createEvent(\"google-cast-prompt-error\", {\n        detail: error,\n        trigger: openEvent ?? loadEvent,\n        cancelable: true\n      });\n      ctx.player.dispatch(errorEvent);\n      this.#notifyRemoteStateChange(\n        ctx,\n        isCastConnected() ? \"connected\" : \"disconnected\",\n        errorEvent\n      );\n      throw error;\n    } finally {\n      ctx.player.dispatch(\"google-cast-prompt-close\", {\n        trigger: errorEvent ?? openEvent ?? loadEvent\n      });\n    }\n  }\n  async load(ctx) {\n    if (!this.#player) {\n      throw Error(\"[vidstack] google cast player was not initialized\");\n    }\n    return new (await import('../providers/vidstack-google-cast.js')).GoogleCastProvider(this.#player, ctx);\n  }\n  async #loadCastFramework(ctx) {\n    if (hasLoadedCastFramework()) return;\n    const loadStartEvent = ctx.player.createEvent(\"google-cast-load-start\");\n    ctx.player.dispatch(loadStartEvent);\n    await loadScript(getCastFrameworkURL());\n    await customElements.whenDefined(\"google-cast-launcher\");\n    const loadedEvent = ctx.player.createEvent(\"google-cast-loaded\", { trigger: loadStartEvent });\n    ctx.player.dispatch(loadedEvent);\n    if (!isCastAvailable()) {\n      throw this.#createError(\"CAST_NOT_AVAILABLE\", \"Google Cast not available on this platform.\");\n    }\n    return loadedEvent;\n  }\n  async #showPrompt(options) {\n    this.#setOptions(options);\n    const errorCode = await this.cast.requestSession();\n    if (errorCode) {\n      throw this.#createError(\n        errorCode.toUpperCase(),\n        getCastErrorMessage(errorCode)\n      );\n    }\n  }\n  #setOptions(options) {\n    this.cast?.setOptions({\n      ...getDefaultCastOptions(),\n      ...options\n    });\n  }\n  #notifyRemoteStateChange(ctx, state, trigger) {\n    const detail = { type: \"google-cast\", state };\n    ctx.notify(\"remote-playback-change\", detail, trigger);\n  }\n  #createError(code, message) {\n    const error = Error(message);\n    error.code = code;\n    return error;\n  }\n}\n\nexport { GoogleCastLoader };\n","import { listenEvent } from './vidstack-Bu2kfzUd.js';\n\nfunction getCastFrameworkURL() {\n  return \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\";\n}\nfunction hasLoadedCastFramework() {\n  return !!window.cast?.framework;\n}\nfunction isCastAvailable() {\n  return !!window.chrome?.cast?.isAvailable;\n}\nfunction isCastConnected() {\n  return getCastContext().getCastState() === cast.framework.CastState.CONNECTED;\n}\nfunction getCastContext() {\n  return window.cast.framework.CastContext.getInstance();\n}\nfunction getCastSession() {\n  return getCastContext().getCurrentSession();\n}\nfunction getCastSessionMedia() {\n  return getCastSession()?.getSessionObj().media[0];\n}\nfunction hasActiveCastSession(src) {\n  const contentId = getCastSessionMedia()?.media.contentId;\n  return contentId === src?.src;\n}\nfunction getDefaultCastOptions() {\n  return {\n    language: \"en-US\",\n    autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n    receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID,\n    resumeSavedSession: true,\n    androidReceiverCompatible: true\n  };\n}\nfunction getCastErrorMessage(code) {\n  const defaultMessage = `Google Cast Error Code: ${code}`;\n  {\n    switch (code) {\n      case chrome.cast.ErrorCode.API_NOT_INITIALIZED:\n        return \"The API is not initialized.\";\n      case chrome.cast.ErrorCode.CANCEL:\n        return \"The operation was canceled by the user\";\n      case chrome.cast.ErrorCode.CHANNEL_ERROR:\n        return \"A channel to the receiver is not available.\";\n      case chrome.cast.ErrorCode.EXTENSION_MISSING:\n        return \"The Cast extension is not available.\";\n      case chrome.cast.ErrorCode.INVALID_PARAMETER:\n        return \"The parameters to the operation were not valid.\";\n      case chrome.cast.ErrorCode.RECEIVER_UNAVAILABLE:\n        return \"No receiver was compatible with the session request.\";\n      case chrome.cast.ErrorCode.SESSION_ERROR:\n        return \"A session could not be created, or a session was invalid.\";\n      case chrome.cast.ErrorCode.TIMEOUT:\n        return \"The operation timed out.\";\n      default:\n        return defaultMessage;\n    }\n  }\n}\nfunction listenCastContextEvent(type, handler) {\n  return listenEvent(getCastContext(), type, handler);\n}\n\nexport { getCastContext, getCastErrorMessage, getCastFrameworkURL, getCastSession, getCastSessionMedia, getDefaultCastOptions, hasActiveCastSession, hasLoadedCastFramework, isCastAvailable, isCastConnected, listenCastContextEvent };\n"],"names":[],"sourceRoot":""}