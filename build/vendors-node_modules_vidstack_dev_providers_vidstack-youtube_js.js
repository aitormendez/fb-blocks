"use strict";
(globalThis["webpackChunkfb_blocks"] = globalThis["webpackChunkfb_blocks"] || []).push([["vendors-node_modules_vidstack_dev_providers_vidstack-youtube_js"],{

/***/ "./node_modules/vidstack/dev/chunks/vidstack-BoAGnlRt.js":
/*!***************************************************************!*\
  !*** ./node_modules/vidstack/dev/chunks/vidstack-BoAGnlRt.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EmbedProvider: () => (/* binding */ EmbedProvider)
/* harmony export */ });
/* harmony import */ var _vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-Bu2kfzUd.js */ "./node_modules/vidstack/dev/chunks/vidstack-Bu2kfzUd.js");
/* harmony import */ var _vidstack_zG6PIeGg_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-zG6PIeGg.js */ "./node_modules/vidstack/dev/chunks/vidstack-zG6PIeGg.js");



class EmbedProvider {
  #iframe;
  src = (0,_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.signal)("");
  /**
   * Defines which referrer is sent when fetching the resource.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy}
   */
  referrerPolicy = null;
  get iframe() {
    return this.#iframe;
  }
  constructor(iframe) {
    this.#iframe = iframe;
    iframe.setAttribute("frameBorder", "0");
    iframe.setAttribute("aria-hidden", "true");
    iframe.setAttribute(
      "allow",
      "autoplay; fullscreen; encrypted-media; picture-in-picture; accelerometer; gyroscope"
    );
    if (this.referrerPolicy !== null) {
      iframe.setAttribute("referrerpolicy", this.referrerPolicy);
    }
  }
  setup() {
    (0,_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.listenEvent)(window, "message", this.#onWindowMessage.bind(this));
    (0,_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.listenEvent)(this.#iframe, "load", this.onLoad.bind(this));
    (0,_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.effect)(this.#watchSrc.bind(this));
  }
  #watchSrc() {
    const src = this.src();
    if (!src.length) {
      this.#iframe.setAttribute("src", "");
      return;
    }
    const params = (0,_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.peek)(() => this.buildParams());
    this.#iframe.setAttribute("src", (0,_vidstack_zG6PIeGg_js__WEBPACK_IMPORTED_MODULE_1__.appendParamsToURL)(src, params));
  }
  postMessage(message, target) {
    this.#iframe.contentWindow?.postMessage(JSON.stringify(message), target ?? "*");
  }
  #onWindowMessage(event) {
    const origin = this.getOrigin(), isOriginMatch = (event.source === null || event.source === this.#iframe?.contentWindow) && (!(0,_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_0__.isString)(origin) || origin === event.origin);
    if (!isOriginMatch) return;
    try {
      const message = JSON.parse(event.data);
      if (message) this.onMessage(message, event);
      return;
    } catch (e) {
    }
    if (event.data) this.onMessage(event.data, event);
  }
}




/***/ }),

/***/ "./node_modules/vidstack/dev/chunks/vidstack-Dm1xEU9Q.js":
/*!***************************************************************!*\
  !*** ./node_modules/vidstack/dev/chunks/vidstack-Dm1xEU9Q.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   findYouTubePoster: () => (/* binding */ findYouTubePoster),
/* harmony export */   resolveYouTubeVideoId: () => (/* binding */ resolveYouTubeVideoId)
/* harmony export */ });
const videoIdRE = /(?:youtu\.be|youtube|youtube\.com|youtube-nocookie\.com)(?:\/shorts)?\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=|)((?:\w|-){11})/;
const posterCache = /* @__PURE__ */ new Map();
const pendingFetch = /* @__PURE__ */ new Map();
function resolveYouTubeVideoId(src) {
  return src.match(videoIdRE)?.[1];
}
async function findYouTubePoster(videoId, abort) {
  if (posterCache.has(videoId)) return posterCache.get(videoId);
  if (pendingFetch.has(videoId)) return pendingFetch.get(videoId);
  const pending = new Promise(async (resolve) => {
    const sizes = ["maxresdefault", "sddefault", "hqdefault"];
    for (const size of sizes) {
      for (const webp of [true, false]) {
        const url = resolveYouTubePosterURL(videoId, size, webp), response = await fetch(url, {
          mode: "no-cors",
          signal: abort.signal
        });
        if (response.status < 400) {
          posterCache.set(videoId, url);
          resolve(url);
          return;
        }
      }
    }
  }).catch(() => "").finally(() => pendingFetch.delete(videoId));
  pendingFetch.set(videoId, pending);
  return pending;
}
function resolveYouTubePosterURL(videoId, size, webp) {
  const type = webp ? "webp" : "jpg";
  return `https://i.ytimg.com/${webp ? "vi_webp" : "vi"}/${videoId}/${size}.${type}`;
}




/***/ }),

/***/ "./node_modules/vidstack/dev/providers/vidstack-youtube.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vidstack/dev/providers/vidstack-youtube.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   YouTubeProvider: () => (/* binding */ YouTubeProvider)
/* harmony export */ });
/* harmony import */ var _chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunks/vidstack-Bu2kfzUd.js */ "./node_modules/vidstack/dev/chunks/vidstack-Bu2kfzUd.js");
/* harmony import */ var _chunks_vidstack_BFg1ZqiG_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../chunks/vidstack-BFg1ZqiG.js */ "./node_modules/vidstack/dev/chunks/vidstack-BFg1ZqiG.js");
/* harmony import */ var _chunks_vidstack_zG6PIeGg_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chunks/vidstack-zG6PIeGg.js */ "./node_modules/vidstack/dev/chunks/vidstack-zG6PIeGg.js");
/* harmony import */ var _chunks_vidstack_BoAGnlRt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunks/vidstack-BoAGnlRt.js */ "./node_modules/vidstack/dev/chunks/vidstack-BoAGnlRt.js");
/* harmony import */ var _chunks_vidstack_Dm1xEU9Q_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../chunks/vidstack-Dm1xEU9Q.js */ "./node_modules/vidstack/dev/chunks/vidstack-Dm1xEU9Q.js");







const YouTubePlayerState = {
  Ended: 0,
  Playing: 1,
  Paused: 2,
  Buffering: 3,
  Cued: 5
};

class YouTubeProvider extends _chunks_vidstack_BoAGnlRt_js__WEBPACK_IMPORTED_MODULE_0__.EmbedProvider {
  $$PROVIDER_TYPE = "YOUTUBE";
  scope = (0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_1__.createScope)();
  #ctx;
  #videoId = (0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_1__.signal)("");
  #state = -1;
  #currentSrc = null;
  #seekingTimer = -1;
  #invalidPlay = false;
  #promises = /* @__PURE__ */ new Map();
  constructor(iframe, ctx) {
    super(iframe);
    this.#ctx = ctx;
  }
  /**
   * Sets the player's interface language. The parameter value is an ISO 639-1 two-letter
   * language code or a fully specified locale. For example, fr and fr-ca are both valid values.
   * Other language input codes, such as IETF language tags (BCP 47) might also be handled properly.
   *
   * The interface language is used for tooltips in the player and also affects the default caption
   * track. Note that YouTube might select a different caption track language for a particular
   * user based on the user's individual language preferences and the availability of caption tracks.
   *
   * @defaultValue 'en'
   */
  language = "en";
  color = "red";
  /**
   * Whether cookies should be enabled on the embed. This is turned off by default to be
   * GDPR-compliant.
   *
   * @defaultValue `false`
   */
  cookies = false;
  get currentSrc() {
    return this.#currentSrc;
  }
  get type() {
    return "youtube";
  }
  get videoId() {
    return this.#videoId();
  }
  preconnect() {
    (0,_chunks_vidstack_zG6PIeGg_js__WEBPACK_IMPORTED_MODULE_2__.preconnect)(this.getOrigin());
  }
  setup() {
    super.setup();
    (0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_1__.effect)(this.#watchVideoId.bind(this));
    this.#ctx.notify("provider-setup", this);
  }
  destroy() {
    this.#reset();
    const message = "provider destroyed";
    for (const promises of this.#promises.values()) {
      for (const { reject } of promises) reject(message);
    }
    this.#promises.clear();
  }
  async play() {
    return this.#remote("playVideo");
  }
  #playFail(message) {
    this.#getPromise("playVideo")?.reject(message);
  }
  async pause() {
    return this.#remote("pauseVideo");
  }
  #pauseFail(message) {
    this.#getPromise("pauseVideo")?.reject(message);
  }
  setMuted(muted) {
    if (muted) this.#remote("mute");
    else this.#remote("unMute");
  }
  setCurrentTime(time) {
    this.#remote("seekTo", time);
    this.#ctx.notify("seeking", time);
  }
  setVolume(volume) {
    this.#remote("setVolume", volume * 100);
  }
  setPlaybackRate(rate) {
    this.#remote("setPlaybackRate", rate);
  }
  async loadSource(src) {
    if (!(0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_1__.isString)(src.src)) {
      this.#currentSrc = null;
      this.#videoId.set("");
      return;
    }
    const videoId = (0,_chunks_vidstack_Dm1xEU9Q_js__WEBPACK_IMPORTED_MODULE_3__.resolveYouTubeVideoId)(src.src);
    this.#videoId.set(videoId ?? "");
    this.#currentSrc = src;
  }
  getOrigin() {
    return !this.cookies ? "https://www.youtube-nocookie.com" : "https://www.youtube.com";
  }
  #watchVideoId() {
    this.#reset();
    const videoId = this.#videoId();
    if (!videoId) {
      this.src.set("");
      return;
    }
    this.src.set(`${this.getOrigin()}/embed/${videoId}`);
    this.#ctx.notify("load-start");
  }
  buildParams() {
    const { keyDisabled } = this.#ctx.$props, { muted, playsInline, nativeControls } = this.#ctx.$state, showControls = nativeControls();
    return {
      rel: 0,
      autoplay: 0,
      cc_lang_pref: this.language,
      cc_load_policy: showControls ? 1 : void 0,
      color: this.color,
      controls: showControls ? 1 : 0,
      disablekb: !showControls || keyDisabled() ? 1 : 0,
      enablejsapi: 1,
      fs: 1,
      hl: this.language,
      iv_load_policy: showControls ? 1 : 3,
      mute: muted() ? 1 : 0,
      playsinline: playsInline() ? 1 : 0
    };
  }
  #remote(command, arg) {
    let promise = (0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_1__.deferredPromise)(), promises = this.#promises.get(command);
    if (!promises) this.#promises.set(command, promises = []);
    promises.push(promise);
    this.postMessage({
      event: "command",
      func: command,
      args: arg ? [arg] : void 0
    });
    return promise.promise;
  }
  onLoad() {
    window.setTimeout(() => this.postMessage({ event: "listening" }), 100);
  }
  #onReady(trigger) {
    this.#ctx.notify("loaded-metadata");
    this.#ctx.notify("loaded-data");
    this.#ctx.delegate.ready(void 0, trigger);
  }
  #onPause(trigger) {
    this.#getPromise("pauseVideo")?.resolve();
    this.#ctx.notify("pause", void 0, trigger);
  }
  #onTimeUpdate(time, trigger) {
    const { duration, realCurrentTime } = this.#ctx.$state, hasEnded = this.#state === YouTubePlayerState.Ended, boundTime = hasEnded ? duration() : time;
    this.#ctx.notify("time-change", boundTime, trigger);
    if (!hasEnded && Math.abs(boundTime - realCurrentTime()) > 1) {
      this.#ctx.notify("seeking", boundTime, trigger);
    }
  }
  #onProgress(buffered, seekable, trigger) {
    const detail = {
      buffered: new _chunks_vidstack_BFg1ZqiG_js__WEBPACK_IMPORTED_MODULE_4__.TimeRange(0, buffered),
      seekable
    };
    this.#ctx.notify("progress", detail, trigger);
    const { seeking, realCurrentTime } = this.#ctx.$state;
    if (seeking() && buffered > realCurrentTime()) {
      this.#onSeeked(trigger);
    }
  }
  #onSeeked(trigger) {
    const { paused, realCurrentTime } = this.#ctx.$state;
    window.clearTimeout(this.#seekingTimer);
    this.#seekingTimer = window.setTimeout(
      () => {
        this.#ctx.notify("seeked", realCurrentTime(), trigger);
        this.#seekingTimer = -1;
      },
      paused() ? 100 : 0
    );
  }
  #onEnded(trigger) {
    const { seeking } = this.#ctx.$state;
    if (seeking()) this.#onSeeked(trigger);
    this.#ctx.notify("pause", void 0, trigger);
    this.#ctx.notify("end", void 0, trigger);
  }
  #onStateChange(state, trigger) {
    const { paused, seeking } = this.#ctx.$state, isPlaying = state === YouTubePlayerState.Playing, isBuffering = state === YouTubePlayerState.Buffering, isPendingPlay = this.#isPending("playVideo"), isPlay = paused() && (isBuffering || isPlaying);
    if (isBuffering) this.#ctx.notify("waiting", void 0, trigger);
    if (seeking() && isPlaying) {
      this.#onSeeked(trigger);
    }
    if (this.#invalidPlay && isPlaying) {
      this.pause();
      this.#invalidPlay = false;
      this.setMuted(this.#ctx.$state.muted());
      return;
    }
    if (!isPendingPlay && isPlay) {
      this.#invalidPlay = true;
      this.setMuted(true);
      return;
    }
    if (isPlay) {
      this.#getPromise("playVideo")?.resolve();
      this.#ctx.notify("play", void 0, trigger);
    }
    switch (state) {
      case YouTubePlayerState.Cued:
        this.#onReady(trigger);
        break;
      case YouTubePlayerState.Playing:
        this.#ctx.notify("playing", void 0, trigger);
        break;
      case YouTubePlayerState.Paused:
        this.#onPause(trigger);
        break;
      case YouTubePlayerState.Ended:
        this.#onEnded(trigger);
        break;
    }
    this.#state = state;
  }
  onMessage({ info }, event) {
    if (!info) return;
    const { title, intrinsicDuration, playbackRate } = this.#ctx.$state;
    if ((0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(info.videoData) && info.videoData.title !== title()) {
      this.#ctx.notify("title-change", info.videoData.title, event);
    }
    if ((0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(info.duration) && info.duration !== intrinsicDuration()) {
      if ((0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(info.videoLoadedFraction)) {
        const buffered = info.progressState?.loaded ?? info.videoLoadedFraction * info.duration, seekable = new _chunks_vidstack_BFg1ZqiG_js__WEBPACK_IMPORTED_MODULE_4__.TimeRange(0, info.duration);
        this.#onProgress(buffered, seekable, event);
      }
      this.#ctx.notify("duration-change", info.duration, event);
    }
    if ((0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(info.playbackRate) && info.playbackRate !== playbackRate()) {
      this.#ctx.notify("rate-change", info.playbackRate, event);
    }
    if (info.progressState) {
      const { current, seekableStart, seekableEnd, loaded, duration } = info.progressState;
      this.#onTimeUpdate(current, event);
      this.#onProgress(loaded, new _chunks_vidstack_BFg1ZqiG_js__WEBPACK_IMPORTED_MODULE_4__.TimeRange(seekableStart, seekableEnd), event);
      if (duration !== intrinsicDuration()) {
        this.#ctx.notify("duration-change", duration, event);
      }
    }
    if ((0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(info.volume) && (0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_1__.isBoolean)(info.muted) && !this.#invalidPlay) {
      const detail = {
        muted: info.muted,
        volume: info.volume / 100
      };
      this.#ctx.notify("volume-change", detail, event);
    }
    if ((0,_chunks_vidstack_Bu2kfzUd_js__WEBPACK_IMPORTED_MODULE_1__.isNumber)(info.playerState) && info.playerState !== this.#state) {
      this.#onStateChange(info.playerState, event);
    }
  }
  #reset() {
    this.#state = -1;
    this.#seekingTimer = -1;
    this.#invalidPlay = false;
  }
  #getPromise(command) {
    return this.#promises.get(command)?.shift();
  }
  #isPending(command) {
    return Boolean(this.#promises.get(command)?.length);
  }
}




/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_vidstack_dev_providers_vidstack-youtube_js.js.map?ver=4c0c11af6b5fba8d5669