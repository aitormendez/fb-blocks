"use strict";
(globalThis["webpackChunkfb_blocks"] = globalThis["webpackChunkfb_blocks"] || []).push([["node_modules_vidstack_dev_chunks_vidstack-krOAtKMi_js"],{

/***/ "./node_modules/vidstack/dev/chunks/vidstack-krOAtKMi.js":
/*!***************************************************************!*\
  !*** ./node_modules/vidstack/dev/chunks/vidstack-krOAtKMi.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getVimeoVideoInfo: () => (/* binding */ getVimeoVideoInfo),
/* harmony export */   resolveVimeoVideoId: () => (/* binding */ resolveVimeoVideoId)
/* harmony export */ });
const videoIdRE = /(?:https:\/\/)?(?:player\.)?vimeo(?:\.com)?\/(?:video\/)?(\d+)(?:(?:\?hash=|\?h=|\/)(.*))?/;
const infoCache = /* @__PURE__ */ new Map();
const pendingFetch = /* @__PURE__ */ new Map();
function resolveVimeoVideoId(src) {
  const matches = src.match(videoIdRE);
  return { videoId: matches?.[1], hash: matches?.[2] };
}
async function getVimeoVideoInfo(videoId, abort, videoHash) {
  if (infoCache.has(videoId)) return infoCache.get(videoId);
  if (pendingFetch.has(videoId)) return pendingFetch.get(videoId);
  let oembedSrc = `https://vimeo.com/api/oembed.json?url=https://player.vimeo.com/video/${videoId}`;
  if (videoHash) {
    oembedSrc = oembedSrc.concat(`?h=${videoHash}`);
  }
  const promise = window.fetch(oembedSrc, {
    mode: "cors",
    signal: abort.signal
  }).then((response) => response.json()).then((data) => {
    const thumnailRegex = /vimeocdn.com\/video\/(.*)?_/, thumbnailId = data?.thumbnail_url?.match(thumnailRegex)?.[1], poster = thumbnailId ? `https://i.vimeocdn.com/video/${thumbnailId}_1920x1080.webp` : "", info = {
      title: data?.title ?? "",
      duration: data?.duration ?? 0,
      poster,
      pro: data.account_type !== "basic"
    };
    infoCache.set(videoId, info);
    return info;
  }).finally(() => pendingFetch.delete(videoId));
  pendingFetch.set(videoId, promise);
  return promise;
}




/***/ })

}]);
//# sourceMappingURL=node_modules_vidstack_dev_chunks_vidstack-krOAtKMi_js.js.map?ver=0549e411a823f54323e4